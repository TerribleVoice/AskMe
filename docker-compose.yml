version: "3.9"
services:
  web-api:
    build: ./Backend/
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - "7279:80"

  postgres:
    image: postgres:14.3
    container_name: "postgres"
    environment:
      POSTGRES_DB: "AskMe"
      POSTGRES_USER: 'admin'
      POSTGRES_PASSWORD: "test"
      PGDATA: "../../Database/Data/pgdata"
    ports:
      - "5000:5432"
    volumes:
      - ../../Database/Initialization:/docker-entrypoint-initdb.d
      - ../../Database/Data/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d AskMe" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"

  frontend:
    build: ./Frontend/
    ports:
      - "3000:3000"

  proxy:
    image: nginx
    volumes:
      - ./nginx.conf/:/etc/nginx/nginx.conf
    ports:
      - "80:80"



#  payment:
#    restart: unless-stopped
#    container_name: payment
#    build:
#      context: .
#      dockerfile: ./paymentService/Dockerfile
#    environment:
#      POSTGRES_DB: "AskMe"
#      POSTGRES_USER: 'admin'
#      POSTGRES_PASSWORD: "test"
#    depends_on:
#      - postgres
#    ports:
#      - "4554:4554"
#    volumes:
#      - ./paymentService:/app
#
#  tg_bot:
#    restart: unless-stopped
#    container_name: tg_bot
#    build:
#      context: .
#      dockerfile: ./tgService/Dockerfile
#    environment:
#      POSTGRES_DB: "AskMe"
#      POSTGRES_USER: 'admin'
#      POSTGRES_PASSWORD: "test"
#      TG_TOKEN: ${AskMe_TG_TOKEN}
#    depends_on:
#      - postgres
#    volumes:
#      - ./tgService:/app
