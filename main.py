from keyboard.kb_kick import kb_kick
from database.config import username_bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from database.database_main import database
from keyboard.kb_captcha import kb_captcha_1, kb_captcha_2, kb_captcha_3, kb_captcha_4, kb_captcha_5, kb_captcha_6, kb_captcha_7
from aiogram import types, Dispatcher, executor, Bot
from config.config_telegram import TOKEN
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import datetime
import asyncio
import aioschedule
import csv
import random
from contextlib import suppress
from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,
                                      MessageToDeleteNotFound)

async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()

id_send_users = 870590792 # id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏

bot = Bot(token=TOKEN)

dp = Dispatcher(bot=bot, storage=MemoryStorage())


@dp.message_handler(commands=['KickRedFlag'])
async def KickRedFlag_command(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                users = database.get_users_kdf(id_chat=message_chat_id)
                if users == []:
                    await message.answer("You have 0 users with a red flag in this chat!")
                else:
                    await message.answer(f"You have {len(users)} users with a red flag in this chat, and now the bot will kick them!")
                    for user in users:
                        id_user = user[0]
                        id_chat = user[1]
                        await bot.kick_chat_member(chat_id=id_chat, user_id=id_user)
                        database.delete_user_from_kdf(id_user=id_user, id_chat=id_chat)

            else:
                await message.reply(text='You do not have permission to do this!')




@dp.message_handler(commands=['start']) # /start (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —è–∑—ã–∫ –ø–æ–¥ —Å–µ–±—è)
async def start_command_hello_user(message: types.Message):
    chat_user = message.chat.id
    if chat_user > 0:
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
        keyboard_language = InlineKeyboardMarkup()
        keyboard_language_button_ru = InlineKeyboardButton(text='üá∑üá∫–†—É—Å—Å–∫–∏–π', callback_data='ru')
        keyboard_language_button_eng = InlineKeyboardButton(text='üá¨üáßEnglish', callback_data='gb')
        keyboard_language_button_arab = InlineKeyboardButton(text='üá∏üá¶ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', callback_data='sa')
        keyboard_language_button_it = InlineKeyboardButton(text='üáÆüáπItaliano', callback_data='it')
        keyboard_language_button_esp = InlineKeyboardButton(text='üá™üá∏Espanol', callback_data='esp')
        keyboard_language_button_norw = InlineKeyboardButton(text='üá≥üá¥Norwegian', callback_data='norw')
        keyboard_language_button_ind = InlineKeyboardButton(text='üáÆüá©Indonesian', callback_data='ind')
        keyboard_language_button_rom = InlineKeyboardButton(text='üá∑üá¥Romanian', callback_data='rom')
        keyboard_language_button_slovak = InlineKeyboardButton(text='üá∏üá∞Slovak', callback_data='slov')
        keyboard_language_button_fin = InlineKeyboardButton(text='üá´üáÆFinnish', callback_data='fin')
        keyboard_language_button_eesti = InlineKeyboardButton(text='üá™üá™Eesti', callback_data='eesti')
        keyboard_language_button_port = InlineKeyboardButton(text='üáßüá∑Portugues Brasilüáµüáπ', callback_data='port_bras')
        keyboard_language_button_chin = InlineKeyboardButton(text='üá®üá≥Chinese', callback_data='chin')
        keyboard_language_button_deu = InlineKeyboardButton(text='üá©üá™Deutsch', callback_data='deu')
        keyboard_language_button_french = InlineKeyboardButton(text='üá´üá∑French', callback_data='fren')
        keyboard_language_button_kor = InlineKeyboardButton(text='üá∞üáµKorean', callback_data='kor')
        keyboard_language_button_czech = InlineKeyboardButton(text='üá®üáøCzech', callback_data='czech')
        keyboard_language_button_turk = InlineKeyboardButton(text='üáπüá∑Turkce', callback_data='turk')
        keyboard_language_button_cat = InlineKeyboardButton(text='üá™üá∏Catalan', callback_data='catalan')
        keyboard_language_button_hung = InlineKeyboardButton(text='üá≠üá∫Hungarian', callback_data='hung')
        keyboard_language_button_bulg = InlineKeyboardButton(text='üáßüá¨Bulgarian', callback_data='bulg')

        keyboard_language.add(keyboard_language_button_ru, keyboard_language_button_eng)
        keyboard_language.add(keyboard_language_button_arab, keyboard_language_button_it)
        keyboard_language.add(keyboard_language_button_esp, keyboard_language_button_norw)
        keyboard_language.add(keyboard_language_button_ind, keyboard_language_button_rom)
        keyboard_language.add(keyboard_language_button_slovak, keyboard_language_button_fin)
        keyboard_language.add(keyboard_language_button_eesti, keyboard_language_button_port)
        keyboard_language.add(keyboard_language_button_chin, keyboard_language_button_deu)
        keyboard_language.add(keyboard_language_button_french, keyboard_language_button_czech)
        keyboard_language.add(keyboard_language_button_turk, keyboard_language_button_cat)
        keyboard_language.add(keyboard_language_button_hung, keyboard_language_button_bulg)

        await message.answer('Choose language', reply_markup=keyboard_language)

# –ù–∞—á–∞–ª–æ (–≤—ã–±–æ—Ä —è–∑—ã–∫–∞)
# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫
@dp.callback_query_handler(text='ru')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='ru')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç', url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase', callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='–°–∞–π—Ç', url='https://redop.netlify.app', callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='–ù–∞—à –∫–∞–Ω–∞–ª', url='https://t.me/official_redop', callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ø—Ç—á–∏', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='ru')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='ru')
    await call.message.answer(f"""Redop ‚Äì –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –±–æ—Ä—å–±—ã —Å–æ —Å–ø–∞–º–æ–º –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ. –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–≤–µ—Ä—à–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã. –û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ —Å–æ—Å—Ç–∞–≤–∏—Ç —Ç—Ä—É–¥–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –æ–¥–Ω–∞–∫–æ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º –±–æ—Ç–∞–º –æ–Ω –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç –≤ –¥–æ—Å—Ç—É–ø–µ. 

–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ—Ç–∞ @Redop_AntiSpam_bot –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è https://redop.netlify.app/  

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏–ª–∏ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞. 

–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.

–ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –≥—Ä—É–ø–ø –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Telegram.""")

    await call.message.answer("""
–î–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

1. –î–æ–±–∞–≤–∏—Ç—å Redop –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

2. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω Redop bot.""", reply_markup=kb_start)


@dp.callback_query_handler(text='gb')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='gb')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Learn about the capabilities of the bot', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Add a chat',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Website', url='https://redop.netlify.app', callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Our channel', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Change language', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Settings captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='gb')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='gb')
    await call.message.answer(f"""Redop is an innovative solution for fighting spam in Telegram. The bot prompts each new user to perform several actions within one minute. Normal users will have no trouble completing them, but it denies access to malicious bots. 

The @Redop_AntiSpam_bot is currently supported by https://redop.netlify.app/  

If you have any questions, you can always ask for help on our website or in the contacts in the bot description. 

Our specialists will be happy to answer any questions you may have.

We are grateful that you have made the right choice for the security and moderation of your groups on the Telegram platform.""")

    await call.message.answer("""

To successfully work with the bot, you need:

1. Add Redop to the group and appoint him as an administrator.

2. After logging in, you will see a list of your groups to which Redop bot has been added.

Translated with www.DeepL.com/Translator (free version)""", reply_markup=kb_start)


@dp.callback_query_handler(text='bulg')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='bulg')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='–ö–æ–º–∞–Ω–¥–∏', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='–î–æ–±–∞–≤—è–Ω–µ –∫—ä–º —á–∞—Ç',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='–ù–∞—à–∏—è—Ç —É–µ–±—Å–∞–π—Ç', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='–ù–∞—à–∏—è—Ç –∫–∞–Ω–∞–ª', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ –µ–∑–∏–∫–∞', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='bulg')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='bulg')
    await call.message.answer(f"""Redop –µ –∏–Ω–æ–≤–∞—Ç–∏–≤–Ω–æ –∞–Ω—Ç–∏—Å–ø–∞–º —Ä–µ—à–µ–Ω–∏–µ –∑–∞ Telegram. –ë–æ—Ç—ä—Ç –ø–æ–¥–∫–∞–Ω–≤–∞ –≤—Å–µ–∫–∏ –Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –¥–∞ –∏–∑–≤—ä—Ä—à–∏ –Ω—è–∫–æ–ª–∫–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ –µ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞. –ù–æ—Ä–º–∞–ª–Ω–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –Ω—è–º–∞—Ç –ø—Ä–æ–±–ª–µ–º–∏ –¥–∞ –≥–∏ –∏–∑–ø—ä–ª–Ω—è—Ç, –Ω–æ —Ç–æ–π –æ—Ç–∫–∞–∑–≤–∞ –¥–æ—Å—Ç—ä–ø –Ω–∞ –∑–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–∏ –±–æ—Ç–æ–≤–µ. 

–í –º–æ–º–µ–Ω—Ç–∞ –±–æ—Ç—ä—Ç @Redop_AntiSpam_bot —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞ –æ—Ç https://redop.netlify.app/.  

–ê–∫–æ –∏–º–∞—Ç–µ –Ω—è–∫–∞–∫–≤–∏ –≤—ä–ø—Ä–æ—Å–∏, –≤–∏–Ω–∞–≥–∏ –º–æ–∂–µ—Ç–µ –¥–∞ –ø–æ—Ç—ä—Ä—Å–∏—Ç–µ –ø–æ–º–æ—â –Ω–∞ –Ω–∞—à–∏—è —É–µ–±—Å–∞–π—Ç –∏–ª–∏ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ—Ç–æ –Ω–∞ –±–æ—Ç–∞. 

–ù–∞—à–∏—Ç–µ —Å–ª—É–∂–∏—Ç–µ–ª–∏ —â–µ —Å–µ —Ä–∞–¥–≤–∞—Ç –¥–∞ –æ—Ç–≥–æ–≤–æ—Ä—è—Ç –Ω–∞ –≤—Å–∏—á–∫–∏ –≤–∞—à–∏ –≤—ä–ø—Ä–æ—Å–∏.

–û—Ü–µ–Ω—è–≤–∞–º–µ —Ñ–∞–∫—Ç–∞, —á–µ —Å—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–Ω–∏—è –∏–∑–±–æ—Ä –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç—Ç–∞ –∏ –º–æ–¥–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –≤–∞—à–∏—Ç–µ –≥—Ä—É–ø–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞ Telegram.""")

    await call.message.answer("""
–ó–∞ –¥–∞ —Ä–∞–±–æ—Ç–∏—Ç–µ —É—Å–ø–µ—à–Ω–æ —Å –±–æ—Ç–∞, —Ç—Ä—è–±–≤–∞ –¥–∞:

1. –î–∞ –¥–æ–±–∞–≤–∏—Ç–µ Redop –∫—ä–º –≥—Ä—É–ø–∞—Ç–∞ –∏ –¥–∞ –≥–æ –Ω–∞–∑–Ω–∞—á–∏—Ç–µ –∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.

2. –°–ª–µ–¥ –∫–∞—Ç–æ –≤–ª–µ–∑–µ—Ç–µ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, —â–µ –≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å—ä–∫ —Å –≤–∞—à–∏—Ç–µ –≥—Ä—É–ø–∏, –∫—ä–º –∫–æ–∏—Ç–æ –µ –¥–æ–±–∞–≤–µ–Ω –±–æ—Ç—ä—Ç Redop.
    """, reply_markup=kb_start)


@dp.callback_query_handler(text='hung')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='hung')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Parancsok', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Hozz√°ad√°s a chathez',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Weboldalunk', url='https://redop.netlify.app', callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Csatorn√°nk', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Nyelvv√°lt√°s', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Captcha m√≥dos√≠t√°sa', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='hung')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='hung')
    await call.message.answer(f"""A Redop egy innovat√≠v spamellenes megold√°s a Telegram sz√°m√°ra. A bot minden √∫j felhaszn√°l√≥t egy percen bel√ºl t√∂bb m≈±velet elv√©gz√©s√©re sz√≥l√≠t fel. A norm√°l felhaszn√°l√≥knak nem okoz gondot ezek elv√©gz√©se, de a rosszindulat√∫ botokt√≥l megtagadja a hozz√°f√©r√©st. 

A @Redop_AntiSpam_botot jelenleg a https://redop.netlify.app/ tartja fenn.  

Ha b√°rmilyen k√©rd√©sed van, b√°rmikor k√©rhetsz seg√≠ts√©get a weboldalunkon vagy a bot le√≠r√°s√°ban tal√°lhat√≥ el√©rhet≈ës√©geken. 

Munkat√°rsaink sz√≠vesen v√°laszolnak minden k√©rd√©s√©re.

Nagyra √©rt√©kelj√ºk, hogy j√≥ d√∂nt√©st hozt√°l a Telegram platformon l√©v≈ë csoportjaid biztons√°ga √©s moder√°l√°sa √©rdek√©ben.""")

    await call.message.answer("""
A bot sikeres m≈±k√∂d√©s√©hez a k√∂vetkez≈ëkre van sz√ºks√©ged:

1. Adja hozz√° Redopot a csoporthoz, √©s nevezze ki adminisztr√°tornak.

2. Miut√°n bejelentkezt√©l, l√°tni fogod a csoportjaid list√°j√°t, amelyekhez a Redop botot hozz√°adtad.
    """, reply_markup=kb_start)


@dp.callback_query_handler(text='catalan')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='catalan')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Scopri cosa possiamo fare', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Aggiungi alla chat',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Sito web', url='https://redop.netlify.app', callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Il nostro canale', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Cambiare la lingua', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Impostazione CAPTCHA', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='catalan')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='catalan')
    await call.message.answer(f"""Redop es una innovadora soluci√≥n antispam para Telegram. El bot pide a cada nuevo usuario que realice varias acciones en un minuto. Los usuarios normales no tienen problemas para completarlas, pero deniega el acceso a los bots maliciosos. 

El @Redop_AntiSpam_bot es mantenido actualmente por https://redop.netlify.app/.  

Si tienes alguna duda, siempre puedes pedir ayuda en nuestro sitio web o en los contactos de la descripci√≥n del bot. 

Nuestro personal estar√° encantado de responder a tus preguntas.

Apreciamos el hecho de que hayas hecho la elecci√≥n correcta para la seguridad y moderaci√≥n de tus grupos en la plataforma Telegram.""")

    await call.message.answer("""
Para trabajar con √©xito con el bot, necesitas:

1. A√±adir a Redop al grupo y nombrarlo administrador.

2. Una vez conectado, ver√°s una lista de tus grupos a los que se ha a√±adido el bot Redop.
    """, reply_markup=kb_start)


@dp.callback_query_handler(text='turk')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='turk')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Komutlar', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Sohbete ekle',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Web sitemiz', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Bizim kanalƒ±mƒ±z', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Dili deƒüi≈ütir', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Captcha yƒ± deƒüi≈ütir', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='turk')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='turk')
    await call.message.answer(f"""Redop, Telegram i√ßin yenilik√ßi bir anti-spam √ß√∂z√ºm√ºd√ºr. Bot, her yeni kullanƒ±cƒ±dan bir dakika i√ßinde birka√ß eylem ger√ßekle≈ütirmesini ister. Normal kullanƒ±cƒ±lar bunlarƒ± tamamlamakta sorun ya≈üamaz, ancak k√∂t√º niyetli botlara eri≈üimi engeller. 

Redop_AntiSpam_bot ≈üu anda https://redop.netlify.app/ tarafƒ±ndan korunmaktadƒ±r.  

Herhangi bir sorunuz varsa, web sitemizden veya bot a√ßƒ±klamasƒ±ndaki ileti≈üim b√∂l√ºm√ºnden her zaman yardƒ±m isteyebilirsiniz. 

Personelimiz sorularƒ±nƒ±zƒ± yanƒ±tlamaktan mutluluk duyacaktƒ±r.

Telegram platformundaki gruplarƒ±nƒ±zƒ±n g√ºvenliƒüi ve denetimi i√ßin doƒüru se√ßimi yaptƒ±ƒüƒ±nƒ±z i√ßin te≈üekk√ºr ederiz.""")

    await call.message.answer("""
Bot ile ba≈üarƒ±lƒ± bir ≈üekilde √ßalƒ±≈ümak i√ßin yapmanƒ±z gerekenler

1. Redop'u gruba ekleyin ve onu y√∂netici olarak atayƒ±n.

2. Giri≈ü yaptƒ±ktan sonra, Redop botunun eklendiƒüi gruplarƒ±nƒ±zƒ±n bir listesini g√∂receksiniz.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='czech')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='czech')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='P≈ô√≠kazy', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='P≈ôidat do chatu',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Na≈°e webov√© str√°nky', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='N√°≈° kan√°l', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Zmƒõnit jazyk', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Zmƒõna captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='czech')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='czech')
    await call.message.answer(f"""Redop je inovativn√≠ antispamov√© ≈ôe≈°en√≠ pro Telegram. Bot vyzve ka≈æd√©ho nov√©ho u≈æivatele, aby bƒõhem jedn√© minuty provedl nƒõkolik akc√≠. Bƒõ≈æn√≠ u≈æivatel√© nemaj√≠ probl√©m s jejich dokonƒçen√≠m, ale ≈°kodliv√Ωm bot≈Øm zamez√≠ p≈ô√≠stup. 

O @Redop_AntiSpam_bot se v souƒçasn√© dobƒõ star√° https://redop.netlify.app/.  

V p≈ô√≠padƒõ jak√Ωchkoli dotaz≈Ø m≈Ø≈æete kdykoli po≈æ√°dat o pomoc na na≈°ich webov√Ωch str√°nk√°ch nebo v kontaktech v popisu bota. 

Na≈°i zamƒõstnanci v√°m r√°di zodpov√≠ v≈°echny va≈°e dotazy.

V√°≈æ√≠me si toho, ≈æe jste se rozhodli spr√°vnƒõ pro zabezpeƒçen√≠ a moderov√°n√≠ sv√Ωch skupin na platformƒõ Telegram.""")

    await call.message.answer("""
Pro √∫spƒõ≈°nou pr√°ci s botem je t≈ôeba:

1. P≈ôidat Redopa do skupiny a jmenovat ho spr√°vcem.

2. Po p≈ôihl√°≈°en√≠ se zobraz√≠ seznam va≈°ich skupin, do kter√Ωch byl bot Redop p≈ôid√°n.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='kor')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='kor')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Î™ÖÎ†πÏñ¥', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Ï±ÑÌåÖÏóê Ï∂îÍ∞ÄÌïòÍ∏∞',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='ÏõπÏÇ¨Ïù¥Ìä∏', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Ï±ÑÎÑê', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='kor')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='kor')
    await call.message.answer(f"""RedopÏùÄ ÌÖîÎ†àÍ∑∏Îû®ÏùÑ ÏúÑÌïú ÌòÅÏã†Ï†ÅÏù∏ Ïä§Ìå∏ Î∞©ÏßÄ ÏÜîÎ£®ÏÖòÏûÖÎãàÎã§. Ïù¥ Î¥áÏùÄ ÏÉàÎ°úÏö¥ ÏÇ¨Ïö©ÏûêÏóêÍ≤å 1Î∂Ñ Ïù¥ÎÇ¥Ïóê Î™á Í∞ÄÏßÄ ÏûëÏóÖÏùÑ ÏàòÌñâÌïòÎùºÎäî Î©îÏãúÏßÄÎ•º ÎùÑÏõÅÎãàÎã§. ÏùºÎ∞ò ÏÇ¨Ïö©ÏûêÎì§ÏùÄ Ïù¥ ÏûëÏóÖÏùÑ ÏôÑÎ£åÌïòÎäîÎç∞ Î¨∏Ï†úÍ∞Ä ÏóÜÏßÄÎßå, ÏïÖÏÑ± Î¥áÏóê ÎåÄÌïú Ï†ëÍ∑ºÏùÄ Í±∞Î∂ÄÌï©ÎãàÎã§. 

Redop_AntiSpam_Î¥áÏùÄ ÌòÑÏû¨ https://redop.netlify.app/ ÏóêÏÑú Í¥ÄÎ¶¨ÌïòÍ≥† ÏûàÏäµÎãàÎã§.  

Í∂ÅÍ∏àÌïú Ï†êÏù¥ ÏûàÏúºÎ©¥ Ïñ∏Ï†úÎì†ÏßÄ Ìä∏ÏúÑÌÑ∞ ÏõπÏÇ¨Ïù¥Ìä∏ÎÇò Î¥á ÏÑ§Î™ÖÏóê ÏûàÎäî Ïó∞ÎùΩÏ≤òÎ°ú ÎèÑÏõÄÏùÑ ÏöîÏ≤≠Ìï† Ïàò ÏûàÏäµÎãàÎã§. 

Ï†ÄÌù¨ ÏßÅÏõêÏù¥ Í∏∞Í∫ºÏù¥ ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÌï¥ ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.

ÌÖîÎ†àÍ∑∏Îû® ÌîåÎû´ÌèºÏóêÏÑú Í∑∏Î£πÏùò Î≥¥ÏïàÍ≥º Í¥ÄÎ¶¨Î•º ÏúÑÌï¥ Ïò¨Î∞îÎ•∏ ÏÑ†ÌÉùÏùÑ Ìï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§.""")

    await call.message.answer("""
Î¥áÏùÑ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©ÌïòÎ†§Î©¥, Îã§ÏùåÏùÑ ÏàòÌñâÌï¥Ïïº Ìï©ÎãàÎã§:

1. RedopÏùÑ Í∑∏Î£πÏóê Ï∂îÍ∞ÄÌïòÍ≥†, Í∑∏Î•º Í¥ÄÎ¶¨ÏûêÎ°ú ÏßÄÏ†ïÌï©ÎãàÎã§.

2. Î°úÍ∑∏Ïù∏ÌïòÎ©¥, Î†àÎìúÎèï Î¥áÏù¥ Ï∂îÍ∞ÄÎêú Í∑∏Î£π Î™©Î°ùÏù¥ ÌëúÏãúÎê©ÎãàÎã§.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='fren')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='fren')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Commandes', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Ajouter au chat',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Notre site web', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Notre cha√Æne', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Changer de langue', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Changer de captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='fren')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='fren')
    await call.message.answer(f"""Redop est une solution anti-spam innovante pour Telegram. Le robot demande √† chaque nouvel utilisateur d'effectuer plusieurs actions en une minute. Les utilisateurs normaux n'ont aucun mal √† les accomplir, mais il refuse l'acc√®s aux bots malveillants. 

Le @Redop_AntiSpam_bot est actuellement maintenu par https://redop.netlify.app/.  

Si vous avez des questions, vous pouvez toujours demander de l'aide sur notre site Web ou dans les contacts figurant dans la description du bot. 

Notre personnel se fera un plaisir de r√©pondre √† toutes vos questions.

Nous appr√©cions le fait que vous ayez fait le bon choix pour la s√©curit√© et la mod√©ration de vos groupes sur la plateforme Telegram.""")

    await call.message.answer("""
Pour travailler avec succ√®s avec le bot, vous devez :

1. Ajouter Redop au groupe et le nommer en tant qu'administrateur.

2. Une fois connect√©, vous verrez une liste de vos groupes auxquels Redop bot a √©t√© ajout√©.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='deu')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='deu')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Befehle', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Zum Chat hinzuf√ºgen',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Unser Standort', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Unser Kanal', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Sprache √§ndern', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Captcha √§ndern', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='deu')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='deu')
    await call.message.answer(f"""Redop ist eine innovative Anti-Spam-L√∂sung f√ºr Telegram. Der Bot fordert jeden neuen Benutzer auf, innerhalb einer Minute mehrere Aktionen durchzuf√ºhren. Normale Benutzer haben keine Probleme, diese auszuf√ºhren, aber b√∂sartigen Bots wird der Zugang verweigert. 

Der @Redop_AntiSpam_bot wird derzeit von https://redop.netlify.app/ betreut.  

Wenn Sie Fragen haben, k√∂nnen Sie jederzeit auf unserer Website oder unter Kontakte in der Bot-Beschreibung um Hilfe bitten. 

Unsere Mitarbeiter werden Ihnen gerne alle Fragen beantworten.

Wir freuen uns, dass Sie die richtige Wahl f√ºr die Sicherheit und Moderation Ihrer Gruppen auf der Telegram-Plattform getroffen haben.""")

    await call.message.answer("""
Um erfolgreich mit dem Bot arbeiten zu k√∂nnen, m√ºssen Sie:

1. F√ºgen Sie Redop zu der Gruppe hinzu und ernennen Sie ihn zum Administrator.

2. Sobald Sie eingeloggt sind, sehen Sie eine Liste Ihrer Gruppen, zu denen der Redop-Bot hinzugef√ºgt wurde.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='chin')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='chin')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='ÂëΩ‰ª§', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Ê∑ªÂä†Âà∞ËÅäÂ§©‰∏≠',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Êàë‰ª¨ÁöÑÁΩëÁ´ô', url='https://redop.netlify.app', callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Êàë‰ª¨ÁöÑÊ∏†ÈÅì', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='ÊîπÂèòËØ≠Ë®Ä', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Êõ¥ÊîπÈ™åËØÅÁ†Å', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='chin')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='chin')
    await call.message.answer(f"""RedopÊòØTelegramÁöÑ‰∏Ä‰∏™ÂàõÊñ∞ÂèçÂûÉÂúæÈÇÆ‰ª∂Ëß£ÂÜ≥ÊñπÊ°à„ÄÇËØ•Êú∫Âô®‰∫∫ÊèêÁ§∫ÊØè‰∏™Êñ∞Áî®Êà∑Âú®‰∏ÄÂàÜÈíüÂÜÖÊâßË°åÂá†‰∏™Âä®‰Ωú„ÄÇÊ≠£Â∏∏Áî®Êà∑ÂÆåÊàêËøô‰∫õÂä®‰ΩúÊ≤°ÊúâÈóÆÈ¢òÔºå‰ΩÜÂÆÉÊãíÁªù‰∫ÜÊÅ∂ÊÑèÊú∫Âô®‰∫∫ÁöÑËÆøÈóÆ„ÄÇ

@Redop_AntiSpam_bot ÁõÆÂâçÁî± https://redop.netlify.app/ 

Â¶ÇÊûú‰Ω†Êúâ‰ªª‰ΩïÈóÆÈ¢òÔºå‰Ω†ÂèØ‰ª•ÈöèÊó∂Âú®Êàë‰ª¨ÁöÑÁΩëÁ´ôÊàñÊú∫Âô®‰∫∫ÊèèËø∞‰∏≠ÁöÑËÅîÁ≥ª‰∫∫‰∏≠ÂØªÊ±ÇÂ∏ÆÂä©„ÄÇ

Êàë‰ª¨ÁöÑÂ∑•‰Ωú‰∫∫ÂëòÂ∞ÜÂæà‰πêÊÑèÂõûÁ≠îÊÇ®ÁöÑ‰ªª‰ΩïÈóÆÈ¢ò„ÄÇ

Êàë‰ª¨ÊÑüË∞¢‰Ω†‰∏∫TelegramÂπ≥Âè∞‰∏äÁöÑÁæ§ÁªÑÁöÑÂÆâÂÖ®ÂíåÁÆ°ÁêÜÂÅöÂá∫ÁöÑÊ≠£Á°ÆÈÄâÊã©„ÄÇ""")

    await call.message.answer("""
Ë¶ÅÊàêÂäü‰ΩøÁî®Êú∫Âô®‰∫∫Ôºå‰Ω†ÈúÄË¶ÅÔºö 1:

1. Â∞ÜRedopÊ∑ªÂä†Âà∞Áæ§ÁªÑÂπ∂‰ªªÂëΩ‰ªñ‰∏∫ÁÆ°ÁêÜÂëò„ÄÇ

2. 2. ÁôªÂΩïÂêéÔºå‰Ω†Â∞ÜÁúãÂà∞‰Ω†ÁöÑÁæ§ÁªÑÂàóË°®ÔºåÂÖ∂‰∏≠RedopÊú∫Âô®‰∫∫Â∑≤Ë¢´Ê∑ªÂä†Âà∞ÂÖ∂‰∏≠„ÄÇ
""", reply_markup=kb_start)


@dp.callback_query_handler(text='port_bras')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='port_bras')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Comandos', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Adicionar ao bate-papo',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Nosso site', url='https://redop.netlify.app', callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Nosso canal', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Mudar o idioma', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Mudan√ßa captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='port_bras')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='port_bras')
    await call.message.answer(f"""Redop √© uma solu√ß√£o inovadora anti-spam para Telegramas. O rob√¥ solicita que cada novo usu√°rio execute v√°rias a√ß√µes em um minuto. Usu√°rios normais n√£o t√™m dificuldade em complet√°-las, mas nega o acesso a bots maliciosos. 

O @Redop_AntiSpam_bot √© atualmente mantido por https://redop.netlify.app/.  

Se voc√™ tiver alguma d√∫vida, voc√™ pode sempre pedir ajuda em nosso site ou em contatos na descri√ß√£o do bot. 

Nossa equipe ficar√° feliz em responder a quaisquer perguntas que voc√™ possa ter.

Agradecemos o fato de voc√™ ter feito a escolha certa para a seguran√ßa e modera√ß√£o de seus grupos na plataforma Telegramas.""")

    await call.message.answer("""
Para trabalhar com sucesso com o bot, voc√™ precisa faz√™-lo:

1. Adicionar o Redop ao grupo e nome√°-lo como administrador.

2. Uma vez logado, voc√™ ver√° uma lista de seus grupos aos quais o bot Redop foi adicionado.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='eesti')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='eesti')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='K√§sklused', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Lisa vestlusesse',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Meie veebileht', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Meie kanal', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Keele muutmine', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Muuda captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='eesti')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='eesti')
    await call.message.answer(f"""Redop on uuenduslik sp√§mmivastane lahendus Telegrami jaoks. Bot palub igal uuel kasutajal √ºhe minuti jooksul teha mitmeid toiminguid. Tavalistel kasutajatel ei ole probleeme nende t√§itmisega, kuid see keelab juurdep√§√§su pahatahtlikele botidele. 

@Redop_AntiSpam_bot'i hooldab praegu https://redop.netlify.app/.  

Kui teil on k√ºsimusi, v√µite alati k√ºsida abi meie veebisaidil v√µi boti kirjelduses olevatest kontaktidest. 

Meie t√∂√∂tajad vastavad hea meelega teie k√ºsimustele.

Me hindame seda, et olete teinud √µige valiku oma r√ºhmade turvalisuse ja modereerimise kohta Telegrami platvormil.""")

    await call.message.answer("""
Botiga edukaks t√∂√∂tamiseks peate:

1. Lisage Redop gruppi ja m√§√§rake ta administraatoriks.

2. Kui olete sisse loginud, n√§ete oma r√ºhmade nimekirja, kuhu Redop bot on lisatud.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='fin')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='fin')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Komennot', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Lis√§√§ keskusteluun',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Verkkosivustomme', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Kanavamme', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Vaihda kieli', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Vaihda captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='fin')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='fin')
    await call.message.answer(f"""Redop on innovatiivinen roskapostinestoratkaisu Telegramille. Botti kehottaa jokaista uutta k√§ytt√§j√§√§ suorittamaan joukon toimenpiteit√§ yhden minuutin kuluessa. Normaaleilla k√§ytt√§jill√§ ei ole ongelmia suorittaa niit√§, mutta se est√§√§ p√§√§syn haitallisilta boteilta. 

@Redop_AntiSpam_botti on t√§ll√§ hetkell√§ https://redop.netlify.app/ yll√§pit√§m√§.  

Jos sinulla on kysytt√§v√§√§, voit aina pyyt√§√§ apua verkkosivustollamme tai botin kuvauksessa olevien yhteystietojen avulla. 

Henkil√∂kuntamme vastaa mielell√§√§n kysymyksiisi.

Arvostamme sit√§, ett√§ olet tehnyt oikean valinnan Telegram-alustan ryhmienne turvallisuuden ja moderoinnin suhteen.""")

    await call.message.answer("""
Jotta voisit ty√∂skennell√§ onnistuneesti botin kanssa, sinun on:

1. Lis√§√§ Redop ryhm√§√§n ja m√§√§rit√§ h√§net yll√§pit√§j√§ksi.

2. Kun olet kirjautunut sis√§√§n, n√§et luettelon ryhmist√§si, joihin Redop-botti on lis√§tty.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='slov')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='slov')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Pr√≠kazy', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Prida≈• do chatu',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Na≈°a webov√° str√°nka', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='N√°≈° kan√°l', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='zmeni≈• jazyk', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='zmeni≈• captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='slov')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='slov')
    await call.message.answer(f"""Redop je inovat√≠vne antispamov√© rie≈°enie pre Telegram. Bot vyzve ka≈æd√©ho nov√©ho pou≈æ√≠vateƒæa, aby v priebehu jednej min√∫ty vykonal s√©riu akci√≠. Be≈æn√≠ pou≈æ√≠vatelia nemaj√∫ probl√©m s ich dokonƒçen√≠m, ale ≈°kodliv√Ωm botom odopiera pr√≠stup. 

V s√∫ƒçasnosti je @Redop_AntiSpam_bot udr≈æiavan√Ω na str√°nke https://redop.netlify.app/.  

V pr√≠pade ak√Ωchkoƒævek ot√°zok m√¥≈æete v≈ædy po≈æiada≈• o pomoc pomocou kontaktn√Ωch √∫dajov na na≈°ej webovej str√°nke alebo v popise bota. 

Na≈°i pracovn√≠ci v√°m radi odpovedia na va≈°e ot√°zky.

Oce≈àujeme, ≈æe ste sa rozhodli spr√°vne, pokiaƒæ ide o bezpeƒçnos≈• a moderovanie va≈°ich skup√≠n na platforme Telegram.""")

    await call.message.answer("""
Aby ste mohli s botom √∫spe≈°ne pracova≈•, mus√≠te:

1. Prida≈• Redop do skupiny a priradi≈• ho ako spr√°vcu.

2. Po prihl√°sen√≠ sa zobraz√≠ zoznam va≈°ich skup√≠n, do ktor√Ωch bol pridan√Ω bot Redop.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='rom')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='rom')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Comenzi', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='AdƒÉuga»õi la chat',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Site-ul nostru', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Canalul nostru', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Schimba»õi limba', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Schimba»õi captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='rom')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='rom')
    await call.message.answer(f"""Redop este o solu»õie anti-spam inovatoare pentru Telegram. Robotul solicitƒÉ fiecƒÉrui utilizator nou sƒÉ efectueze o serie de ac»õiuni √Æn decurs de un minut. Utilizatorii obi»ônui»õi nu au nicio problemƒÉ √Æn a le finaliza, dar refuzƒÉ accesul robo»õilor rƒÉu inten»õiona»õi. 

@Redop_AntiSpam_bot este √Æntre»õinut √Æn prezent de https://redop.netlify.app/.  

DacƒÉ ave»õi √ÆntrebƒÉri, pute»õi oric√¢nd sƒÉ cere»õi ajutor folosind datele de contact de pe site-ul nostru sau din descrierea botului. 

Personalul nostru va fi bucuros sƒÉ vƒÉ rƒÉspundƒÉ la √ÆntrebƒÉri.

Apreciem cƒÉ a»õi fƒÉcut alegerea corectƒÉ √Æn ceea ce prive»ôte securitatea »ôi moderarea grupurilor dvs. pe platforma Telegram.""")

    await call.message.answer("""
Pentru a lucra cu succes cu botul, trebuie sƒÉ:

1. AdƒÉuga»õi Redop la grup »ôi atribui»õi-i func»õia de administrator.

2. DupƒÉ ce vƒÉ conecta»õi, ve»õi vedea o listƒÉ a grupurilor dvs. la care a fost adƒÉugat botul Redop.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='ind')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='ind')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Perintah', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Tambahkan ke obrolan',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Situs web kami', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Saluran kami', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Mengubah bahasa', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Ubah captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='ind')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='ind')
    await call.message.answer(f"""Redop adalah solusi anti-spam yang inovatif untuk Telegram. Bot ini meminta setiap pengguna baru untuk melakukan serangkaian tindakan dalam waktu satu menit. Pengguna normal tidak memiliki masalah dalam menyelesaikannya, tetapi bot ini menolak akses ke bot jahat. 

Bot @Redop_AntiSpam_bot saat ini dikelola oleh https://redop.netlify.app/.  

Jika Anda memiliki pertanyaan, Anda selalu dapat meminta bantuan dengan menggunakan detail kontak di situs web kami atau dalam deskripsi bot. 

Staf kami akan dengan senang hati menjawab pertanyaan Anda.

Kami menghargai bahwa Anda telah membuat pilihan yang tepat tentang keamanan dan moderasi grup Anda di platform Telegram.""")

    await call.message.answer("""
Agar berhasil bekerja dengan bot, Anda perlu:

1. Tambahkan Redop ke grup dan tetapkan dia sebagai administrator.

2. Setelah Anda masuk, Anda akan melihat daftar grup Anda di mana bot Redop telah ditambahkan.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='norw')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='norw')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Finn ut hva vi kan gj√∏re', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Legg til i chat',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='V√•r nettside', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='V√•r kanal', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Endre spr√•k', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Endre captchaen', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='norw')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='norw')
    await call.message.answer(f"""Redop er en innovativ anti-spam-l√∏sning for Telegram. Boten ber hver nye bruker om √• utf√∏re en rekke handlinger i l√∏pet av ett minutt. Vanlige brukere har ingen problemer med √• fullf√∏re dem, men det nekter tilgang til ondsinnede roboter. 

@Redop_AntiSpam_bot vedlikeholdes for tiden av https://redop.netlify.app/.  

Hvis du har sp√∏rsm√•l, kan du alltid be om hjelp ved √• bruke kontaktinformasjonen p√• nettstedet v√•rt eller i botbeskrivelsen. 

V√•re ansatte svarer gjerne p√• sp√∏rsm√•lene dine.

Vi setter pris p√• at du har tatt det riktige valget n√•r det gjelder sikkerhet og moderering av gruppene dine p√• Telegram-plattformen.""")

    await call.message.answer("""
For √• jobbe vellykket med boten, m√• du:

1. legge Redop til gruppen og tilordne ham som administrator.

2. N√•r du er logget inn, vil du se en liste over gruppene dine som Redop-boten er lagt til.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='esp')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='esp')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Descubra lo que podemos hacer', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='A√±adir al chat',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Nuestro sitio web', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Nuestro canal', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Cambiar el idioma', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Configuraci√≥n de Captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='esp')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='esp')
    await call.message.answer(f"""Redop es una innovadora soluci√≥n antispam para Telegram. El bot pide a cada nuevo usuario que realice una serie de acciones en un minuto. Los usuarios normales no tienen problemas para completarlas, pero deniega el acceso a los bots maliciosos. 

El @Redop_AntiSpam_bot est√° actualmente mantenido por https://redop.netlify.app/.  

Si tienes alguna duda, siempre puedes pedir ayuda utilizando los datos de contacto que aparecen en nuestro sitio web o en la descripci√≥n del bot. 

Nuestro personal estar√° encantado de responder a tus preguntas.

Apreciamos que hayas tomado la decisi√≥n correcta sobre la seguridad y moderaci√≥n de tus grupos en la plataforma Telegram.""")

    await call.message.answer("""
Para trabajar con √©xito con el bot, necesitas:

1. A√±adir a Redop al grupo y asignarle como administrador.

2. Una vez que hayas iniciado sesi√≥n, ver√°s una lista de tus grupos en los que se ha a√±adido el bot Redop.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='it')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='it')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='Scopri cosa possiamo fare', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='Aggiungi alla chat',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='Sito web', url='https://redop.netlify.app', callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='Il nostro canale', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='Cambiare la lingua', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='Impostazione CAPTCHA', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='it')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='it')
    await call.message.answer(f"""Redop √® un'innovativa soluzione anti-spam per Telegram. Il bot chiede a ogni nuovo utente di eseguire una serie di azioni entro un minuto. Gli utenti normali non hanno problemi a completarle, ma nega l'accesso ai bot maligni. 

Il @Redop_AntiSpam_bot √® attualmente gestito da https://redop.netlify.app/.  

Se avete domande, potete sempre chiedere aiuto utilizzando i dettagli di contatto sul nostro sito web o nella descrizione del bot. 

Il nostro personale sar√† lieto di rispondere alle vostre domande.

Siamo lieti che abbiate fatto la scelta giusta per quanto riguarda la sicurezza e la moderazione dei vostri gruppi sulla piattaforma Telegram.""")

    await call.message.answer("""
Per poter lavorare con successo con il bot, √® necessario che:

1. Aggiungere Redop al gruppo e assegnargli il ruolo di amministratore.

2. Una volta effettuato l'accesso, vedrete un elenco dei vostri gruppi in cui √® stato aggiunto il bot Redop.
""", reply_markup=kb_start)


@dp.callback_query_handler(text='sa')
async def choose_language_ru(call: types.CallbackQuery):
    database.check_user_who_in_all_users(id_user=call.from_user.id,
                                         first_name=call.from_user.first_name,
                                         language='sa')
    kb_start = InlineKeyboardMarkup(resize_keyboard=True)
    kb_button_commands = InlineKeyboardButton(text='ÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ŸÇÿØÿ±ÿßÿ™ ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™', callback_data='commands')
    kb_button_invite_chat = InlineKeyboardButton(text='ÿ•ÿ∂ÿßŸÅÿ© ÿØÿ±ÿØÿ¥ÿ©   ',
                                                 url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                 callback_data='invite_chat')
    kb_button_site = InlineKeyboardButton(text='ÿßŸÑŸÖŸàŸÇÿπ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä   ', url='https://redop.netlify.app',
                                          callback_data='our_site')
    kb_button_channel = InlineKeyboardButton(text='ŸÇŸÜÿßÿ™ŸÜÿß', url='https://t.me/official_redop',
                                             callback_data='our_channel')
    kb_button_change_language = InlineKeyboardButton(text='ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÑÿ∫ÿ©', callback_data='change_language')
    kb_button_captcha = InlineKeyboardButton(text='ÿ•ÿπÿØÿßÿØ Captcha', callback_data='settings_captcha')
    kb_start.add(kb_button_invite_chat, kb_button_channel)
    kb_start.add(kb_button_site, kb_button_commands)
    kb_start.add(kb_button_change_language)
    kb_start.add(kb_button_captcha)

    user_name = call.values['from']['first_name']
    user_id = call.values['from']['id']
    try:
        database.update_user_language(id_user=user_id, language='sa')
    except Exception as ex:
        database.check_user_who_in_all_users(id_user=user_id, first_name=user_name, language='sa')
    await call.message.answer(f""" ŸÑŸÖŸÉÿßŸÅÿ≠ÿ© ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿπÿ¥Ÿàÿßÿ¶Ÿä ŸÑŸÄ Telegram. Ÿäÿ∑ŸÑÿ® ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™ ŸÖŸÜ ŸÉŸÑ ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ¨ÿØŸäÿØ ÿ™ŸÜŸÅŸäÿ∞ ÿπÿØÿ© ÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ŸÅŸä ÿ∫ÿ∂ŸàŸÜ ÿØŸÇŸäŸÇÿ© Ÿàÿßÿ≠ÿØÿ©. ŸÑŸÜ ŸäŸàÿßÿ¨Ÿá ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸàŸÜ ÿßŸÑÿπÿßÿØŸäŸàŸÜ ÿ£Ÿä ŸÖÿ¥ŸÉŸÑÿ© ŸÅŸä ÿ•ŸÉŸÖÿßŸÑŸáÿß ÿå ŸÑŸÉŸÜŸá ÿ≥ŸäŸÖŸÜÿπ ÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿ®ÿ±ÿßŸÖÿ¨ ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™ ÿßŸÑÿ∂ÿßÿ±ÿ©.

ÿ™ÿ™ŸÖ ÿµŸäÿßŸÜÿ©Redop_AntiSpam_bot ÿ≠ÿßŸÑŸäŸãÿß ÿ®Ÿàÿßÿ≥ÿ∑ÿ© https://redop.netlify.app/.

ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸÑÿØŸäŸÉ ÿ£Ÿä ÿ£ÿ≥ÿ¶ŸÑÿ© ÿå ŸÅŸäŸÖŸÉŸÜŸÉ ÿØÿßÿ¶ŸÖŸãÿß ÿ∑ŸÑÿ® ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© ŸÖŸÜ ÿ¨Ÿáÿßÿ™ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿπŸÑŸâ ŸÖŸàŸÇÿπŸÜÿß ÿπŸÑŸâ ÿßŸÑŸàŸäÿ® ÿ£Ÿà ŸÅŸä ŸàÿµŸÅ ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™.

ÿ≥ŸäŸÉŸàŸÜ ŸÖŸàÿ∏ŸÅŸàŸÜÿß ÿ≥ÿπÿØÿßÿ° ŸÑŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ ÿ£ÿ≥ÿ¶ŸÑÿ™ŸÉ.

ŸÜÿ≠ŸÜ ŸÜŸÇÿØÿ± ÿ£ŸÜŸÉ ÿßÿ™ÿÆÿ∞ÿ™ ÿßŸÑŸÇÿ±ÿßÿ± ÿßŸÑÿµÿ≠Ÿäÿ≠ ŸÅŸäŸÖÿß Ÿäÿ™ÿπŸÑŸÇ ÿ®ÿ£ŸÖÿßŸÜ ŸÖÿ¨ŸÖŸàÿπÿßÿ™ŸÉ ŸàÿßŸÑÿßÿπÿ™ÿØÿßŸÑ ŸÅŸäŸáÿß ÿπŸÑŸâ ŸÖŸÜÿµÿ© Telegram.
""")

    await call.message.answer("""
ŸÑŸÑÿπŸÖŸÑ ÿ®ŸÜÿ¨ÿßÿ≠ ŸÖÿπ ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™ ÿå Ÿäÿ¨ÿ® ÿπŸÑŸäŸÉ:

1. ÿ£ÿ∂ŸÅ Redop ÿ•ŸÑŸâ ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ© Ÿàÿßÿ¨ÿπŸÑŸá ŸÖÿ≥ÿ§ŸàŸÑÿßŸã.

2. ÿ®ŸÖÿ¨ÿ±ÿØ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿå ÿ≥ÿ™ÿ±Ÿâ ŸÇÿßÿ¶ŸÖÿ© ÿ®ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™ ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ ÿ≠Ÿäÿ´ ÿ™ŸÖÿ™ ÿ•ÿ∂ÿßŸÅÿ© ÿ±Ÿàÿ®Ÿàÿ™ Redop
""", reply_markup=kb_start)

# –í—Å–µ —è–∑—ã–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.


class SendMessageChat(StatesGroup): # –§—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ä–∞—Å—Å—Å—ã–ª–∫—É –ø–æ —á–∞—Ç–∞–º
    message = State()
    confirm = State()


@dp.message_handler(commands=['greeting']) # —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∫–∞–ø—Ç—á–∏ (ON)
async def greeting_command(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
        user_id_is_admin = user_admin['status']
        if user_id_is_admin != 'member':
            database.set_greeting_chat(id_chat=chat_user)
            await message.reply(text='Now after passing the captcha, the bot will welcome the user!')
        else:
            await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['ungreeting']) # —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∫–∞–ø—Ç—á–∏ (OFF)
async def greeting_command(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
        user_id_is_admin = user_admin['status']
        if user_id_is_admin != 'member':
            database.delete_entry_chat(id_chat=chat_user)
            await message.reply(text='Now after passing the captcha, the bot will not welcome the user!')
        else:
            await message.reply(text='You do not have permission to do this!')


@dp.message_handler(commands=['deleteEntryMessage']) # —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç —á–µ–ª–æ–≤–µ–∫–∞ (ON)
async def deleteentrymessage_command(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
        user_id_is_admin = user_admin['status']
        if user_id_is_admin != 'member':
            database.set_entry_chat(id_chat=chat_user)
            await message.reply(text='Entry messages are now deleted!')
        else:
            await message.reply(text='You do not have permission to do this!')


@dp.message_handler(commands=['undeleteEntryMessage']) # —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç —á–µ–ª–æ–≤–µ–∫–∞ (OFF)
async def deleteentrymessage_command(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
        user_id_is_admin = user_admin['status']
        if user_id_is_admin != 'member':
            database.delete_entry_chat(id_chat=chat_user)
            await message.reply(text='Entry messages are now not deleted!')
        else:
            await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['attackon']) # –¥–µ–ª–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def restrict_command(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
        user_id_is_admin = user_admin['status']
        if user_id_is_admin == 'creator':
            database.set_attack_chat(id_chat=chat_user, status=True)
        else:
            await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['attackoff']) # –¥–µ–ª–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø–æ —É–º–æ–ª.)
async def restrict_command(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
        user_id_is_admin = user_admin['status']
        if user_id_is_admin == 'creator':
            database.set_attack_chat(id_chat=chat_user, status=False)
        else:
            await message.reply(text='You do not have permission to do this!')


@dp.message_handler(commands=['lock']) # —Ñ—É–Ω–∫—Ü–∏—è, –¥–µ–ª–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
async def lock_command(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=chat_user)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.add_lock_chat(id_chat=chat_user)
                await message.reply('Now users will not be able to use user commands!')
            else:
                await message.reply(text='You do not have permission to do this!')


@dp.message_handler(commands=['unlock']) # –∞–Ω–∞–ª–æ–≥ lock
async def lock_command(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=chat_user)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.delete_lock_chat(id_chat=chat_user)
                await message.reply('Now users will be able to use user commands!')
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['send_users']) # —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_chat_users(message: types.Message):
    if message.chat.id == id_send_users:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        await SendMessageChat.message.set()
@dp.message_handler(state=SendMessageChat.message) # —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def sendmessagechat_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = message.text
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?'
                         '–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:'
                         f'{data["message"]}\n'
                         '‚úÖ–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ "–£–í–ï–†–ï–ù"‚úÖ')
    await SendMessageChat.confirm.set()

@dp.message_handler(state=SendMessageChat.confirm) # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
async def sendmessagechat_confirm(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['confirm'] = message.text
    if data['confirm'] == '–£–í–ï–†–ï–ù':
        chats_id = database.all_chats()
        for chat in chats_id:
            try:
                await bot.send_message(chat_id=int(chat[0]), text=data['message'])
            except Exception as ex:
                pass
        await state.finish()
    else:
        await message.answer('–°–ª–æ–≤–æ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º!')
        await state.finish()

class CheckChannel(StatesGroup):
    username = State()

@dp.message_handler(commands=['warning']) # —Ñ—É–Ω–∫—Ü–∏—è warning
async def warning_message(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=chat_user)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.warning_on(chat_id=chat_user)
                language_captcha = database.get_language_captcha(id_chat=message.chat.id)
                if language_captcha == []:

                    warning_access = await message.answer('Artificial Intelligence successfully activated ‚úÖ')
                    await message.answer("""Dear users, your safety is important to us, so we recommend you not to post your personal information, as well as any other information about yourself. 

Do not follow any third-party links that are not sent by the chat administrator.

Thank you for your attention and have a nice day!
""")
                    asyncio.create_task(delete_message(warning_message, 60))
                elif language_captcha[0][0] == 'ru':

                    warning_access = await message.answer('–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ')
                    await message.answer("""–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–ª—è –Ω–∞—Å –≤–∞–∂–Ω–∞ –≤–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –Ω–µ —Ä–∞–∑–º–µ—â–∞—Ç—å —Å–≤–æ—é –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ. 

–ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º —Å—Å—ã–ª–∫–∞–º, –Ω–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!
                    """)
                    asyncio.create_task(delete_message(warning_message, 60))
                elif language_captcha[0][0] == 'gb':

                    warning_access = await message.answer('Artificial Intelligence successfully activated ‚úÖ')
                    await message.answer("""Dear users, your safety is important to us, so we recommend you not to post your personal information, as well as any other information about yourself. 

Do not follow any third-party links that are not sent by the chat administrator.

Thank you for your attention and have a nice day!
                    """)
                    asyncio.create_task(delete_message(warning_message, 60))
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['unwarning']) # –≤—ã–∫–ª—é—á–µ–Ω–∏–µ warning
async def warning_message(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=chat_user)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.warning_off(chat_id=chat_user)
                await message.answer('Now the bot will not notify about security')
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['/skipOldUsers']) # —Ñ—É–Ω–∫—Ü–∏—è skipOldUsers
async def skipOldUsersCommand(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=chat_user)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.skipoldusers_action(id_chat=chat_user, status=True)
                await message.answer('Now people with an ID below 1,000,000,000 will not receive the captcha')
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['/unskipOldUsers']) # –∞–Ω–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–∏ /skipOldUsers
async def skipOldUsersCommand(message: types.Message):
    chat_user = message.chat.id
    if chat_user < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=chat_user)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.skipoldusers_action(id_chat=chat_user, status=False)
                await message.answer('Now people with an ID below 1,000,000,000 will receive the captcha')
            else:
                await message.reply(text='You do not have permission to do this!')
class ChangeTypeCaptcha(StatesGroup): # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–ø—Ç—á–∏
    chat_name = State()

class ChangeLanguageCaptcha(StatesGroup): # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∫–∞–ø—Ç—á–∏
    chat_name = State()

@dp.callback_query_handler(text='settings_captcha') # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ø—Ç—á–∏ –≤ –ª—Å —É –±–æ—Ç–∞
async def settings_captcha_command(call: types.CallbackQuery):
    keyboard_choose = InlineKeyboardMarkup()
    keyboard_choose_button1 = InlineKeyboardButton(text='‚óæType Captcha‚óæ', callback_data='type_captcha') # –ò–∑–º–µ–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–ø—Ç—á–∏
    keyboard_choose_button2 = InlineKeyboardButton(text='‚óæLanguage Captcha‚óæ', callback_data='language_captcha') # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∫–∞–ø—Ç—á–∏
    keyboard_choose.add(keyboard_choose_button1)
    keyboard_choose.add(keyboard_choose_button2)
    await call.message.answer('Choose', reply_markup=keyboard_choose)

@dp.callback_query_handler(text='language_captcha') # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∫–∞–ø—Ç—á–∏
async def language_captcha_command(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.')
    await ChangeLanguageCaptcha.chat_name.set()

@dp.message_handler(state=ChangeLanguageCaptcha.chat_name)
async def sendmessagechat_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['chat_name'] = message.text
    all_chats_creator = database.get_all_chats_creator(chat_name=data['chat_name'], id_creator=message.from_user.id)
    if all_chats_creator == []:
        await message.answer('–ß–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        await state.finish()
    else:
        chat_id = database.get_chat_name_id(chat_name=data['chat_name'], id_creator=message.from_user.id)
        keyboard_language = InlineKeyboardMarkup()
        keyboard_language_button_ru = InlineKeyboardButton(text='üá∑üá∫–†—É—Å—Å–∫–∏–π', callback_data='ru_captcha')
        keyboard_language_button_eng = InlineKeyboardButton(text='üá¨üáßEnglish', callback_data='gb_captcha')

        keyboard_language.add(keyboard_language_button_ru, keyboard_language_button_eng)
        await message.answer(f'{chat_id} | {data["chat_name"]}', reply_markup=keyboard_language)

        await state.finish()

# –ù–∞—á–∞–ª–æ:
# –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –∫–∞–ø—Ç—á–∏ (–†—É—Å—Å–∫–∏–π/–ê–Ω–≥–ª–∏–π—Å–∫–∏–π) –æ–ø–∏—Å–∞–Ω—ã —Å–Ω–∏–∑—É.

@dp.callback_query_handler(text='ru_captcha')
async def ru_captcha_command(call: types.CallbackQuery):
    chat_id = call.message.html_text.split('|')[0].lstrip()
    database.add_chatcaptcha(id_chat=int(chat_id), language='ru')
    await call.message.answer('‚úÖSettings applied‚úÖ')


@dp.callback_query_handler(text='gb_captcha')
async def ru_captcha_command(call: types.CallbackQuery):
    chat_id = call.message.html_text.split('|')[0].lstrip()
    database.add_chatcaptcha(id_chat=int(chat_id), language='gb')
    await call.message.answer('‚úÖSettings applied‚úÖ')

# –ö–æ–Ω–µ—Ü.

@dp.callback_query_handler(text='type_captcha') # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–ø—Ç—á–∏
async def type_captcha_command(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.')
    await ChangeTypeCaptcha.chat_name.set()

@dp.message_handler(state=ChangeTypeCaptcha.chat_name)
async def sendmessagechat_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['chat_name'] = message.text
    all_chats_creator = database.get_all_chats_creator(chat_name=data['chat_name'], id_creator=message.from_user.id)
    print(all_chats_creator)
    if all_chats_creator == []:
        await message.answer('–ß–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        await state.finish()
    else:
        keyboard_captcha = InlineKeyboardMarkup(row_width=4)
        keyboard_captcha_button1 = InlineKeyboardButton(text='Simple', callback_data='standart_captcha_ls')
        keyboard_captcha_button2 = InlineKeyboardButton(text='Button', callback_data='highstandart_captcha_ls')
        keyboard_captcha_button3 = InlineKeyboardButton(text='Word', callback_data='word_captcha_ls')
        keyboard_captcha_button4 = InlineKeyboardButton(text='Math', callback_data='math_ex_ls')
        keyboard_captcha.add(keyboard_captcha_button1, keyboard_captcha_button2, keyboard_captcha_button3, keyboard_captcha_button4)
        await message.answer(f"{all_chats_creator[0][0]} | {all_chats_creator[0][1]}\n<b>Please, select the test type for the newcomers:</b>\n\n¬∑ <b>Simple</b> - bot will ask to send anything to the chat\n¬∑ <b>Word</b> - bot will aks to send word\n¬∑ <b>Button</b> - bot will ask to press a button-captcha\n¬∑ <b>Math</b> - bot will ask to pass the example", reply_markup=keyboard_captcha, parse_mode='HTML')
        await state.finish()

# –¢–∏–ø—ã –∫–∞–ø—Ç—á–∏ (–≤—ã–±–æ—Ä) –≤ –ª—Å:

@dp.callback_query_handler(text='math_ex_ls') # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —á–∞—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞–ø—Ç—á—É
async def meth_ex_ls_command(call: types.CallbackQuery):
    html_text = call.message.html_text.split('|')
    chat_id = int(html_text[0].lstrip())
    id_chat = database.chat_id_in_list_chats(chat_id=chat_id)[0][0]
    status = database.get_id_admin_in_list_admins(id_user=call['from']['id'], chat_id=id_chat)
    if status != []:
        await call.message.delete()
        database.update_type_captcha(id_chat=chat_id, type=4)
    else:
        await call.answer(text='You do not have permission to do this!')

@dp.callback_query_handler(text='word_captcha_ls') # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —á–∞—Ç —è–∑—ã–∫–æ–≤—É—é –∫–∞–ø—Ç—á—É
async def word_captcha_ls_command(call: types.CallbackQuery):
    html_text = call.message.html_text.split('|')

    chat_id = int(html_text[0].lstrip())
    id_chat = database.chat_id_in_list_chats(chat_id=chat_id)[0][0]
    status = database.get_id_admin_in_list_admins(id_user=call['from']['id'], chat_id=id_chat)
    if status != []:
        await call.message.delete()
        database.update_type_captcha(id_chat=chat_id, type=3)
    else:
        await call.answer(text='You do not have permission to do this!')
@dp.callback_query_handler(text='highstandart_captcha_ls') # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —á–∞—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É-–∫–∞–ø—Ç—á—É
async def highstandart_captcha_ls_command(call: types.CallbackQuery):
    html_text = call.message.html_text.split('|')

    chat_id = int(html_text[0].lstrip())
    id_chat = database.chat_id_in_list_chats(chat_id=chat_id)[0][0]
    status = database.get_id_admin_in_list_admins(id_user=call['from']['id'], chat_id=id_chat)
    if status != []:
        await call.message.delete()
        database.update_type_captcha(id_chat=chat_id, type=2)
    else:
        await call.answer(text='You do not have permission to do this!')

@dp.callback_query_handler(text='standart_captcha_ls') # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —á–∞—Ç –æ–±—ã—á–Ω—É—é –∫–∞–ø—Ç—á—É
async def standart_captcha_ls_command(call: types.CallbackQuery):
    html_text = call.message.html_text.split('|')

    chat_id = int(html_text[0].lstrip())
    id_chat = database.chat_id_in_list_chats(chat_id=chat_id)[0][0]
    status = database.get_id_admin_in_list_admins(id_user=call['from']['id'], chat_id=id_chat)
    if status != []:
        await call.message.delete()
        database.update_type_captcha(id_chat=chat_id, type=1)
    else:
        await call.answer(text='You do not have permission to do this!')

# –ö–æ–Ω–µ—Ü —Ç–∏–ø–æ–≤ –∫–∞–ø—Ç—á


@dp.callback_query_handler(text='commands') # –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–≤ –ª—Å)
async def start_command_commands(call: types.CallbackQuery):
    user_id = call.values['from']['id']
    language = database.check_language_user(id_user=user_id)[0][0]

    if language == 'ru':
        kb_start = InlineKeyboardMarkup(resize_keyboard=True)
        kb_button_commands = InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞', callback_data='commands')
        kb_button_invite_chat = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç',
                                                     url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                     callback_data='invite_chat')
        kb_button_site = InlineKeyboardButton(text='–°–∞–π—Ç', url='https://redop.netlify.app', callback_data='our_site')
        kb_button_channel = InlineKeyboardButton(text='–ù–∞—à –∫–∞–Ω–∞–ª', url='https://t.me/official_redop',
                                                 callback_data='our_channel')
        kb_button_change_language = InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', callback_data='change_language')
        kb_start.add(kb_button_invite_chat, kb_button_channel)
        kb_start.add(kb_button_site, kb_button_commands)
        kb_start.add(kb_button_change_language)
        await call.message.answer("""–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Ç–∞—Ö:
‚≠ê /warning - –≤–∫–ª—é—á–∞–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–µ—Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏—è —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∏—Ç—å)
‚≠ê /unwarning - –≤—ã–∫–ª—é—á–∞–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–µ—Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏—è —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—ã–∫–ª—é—á–∏—Ç—å)
‚≠ê /captcha - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø –∫–∞–ø—Ç—á–∏
‚≠ê /KickRedFlag - –≤—ã–∑—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –±–æ—Ç–æ–º –∫–∞–∫ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ
‚≠ê /ban  - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–º)
‚≠ê /unban {id-user} - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚≠ê /mute {–º–∏–Ω—É—Ç} - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚≠ê /warn  - –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–º)
‚≠ê /acquit {id-user} - –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚≠ê /status - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Ç–µ
‚≠ê /pin - –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ
‚≠ê /unpin - –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ
‚≠ê /banlist - —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π
‚≠ê /forwardon - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚≠ê /forwardoff - –æ—Ç–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
‚≠ê /silenceon - –æ—Ç–∫–ª—é—á–∏—Ç—å —á–∞—Ç
‚≠ê /silenceoff - –≤–∫–ª—é—á–∏—Ç—å —á–∞—Ç
‚≠ê /cdoctor - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.
‚≠ê /reload_admins - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞.
‚≠ê /skipOldUsers - –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–ø—Ç—á—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ID –Ω–∏–∂–µ 1.000.000.000
‚≠ê /unskipOldUsers - –≤—ã–∫–ª. —Ä–µ–∂–∏–º skipOldUsers
‚≠ê /lock - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
‚≠ê /unlock - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚≠ê /attackon - –¥–µ–ª–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
‚≠ê /attackoff - –¥–µ–ª–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
‚≠ê /deleteEntryMessage - —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
‚≠ê /undeleteEntryMessage - –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
‚≠ê /greeting - —Å–æ–æ–±—â–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∫–∞–ø—Ç—á–µ
‚≠ê /ungreeting - –Ω–µ —Å–æ–æ–±—â–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∫–∞–ø—Ç—á–µ

–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã <b>–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º —á–∞—Ç–∞.</b>""", reply_markup=kb_start, parse_mode="HTML")


    elif language == 'sa':
        kb_start = InlineKeyboardMarkup(resize_keyboard=True)
        kb_button_commands = InlineKeyboardButton(text='ÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ŸÇÿØÿ±ÿßÿ™ ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™', callback_data='commands')
        kb_button_invite_chat = InlineKeyboardButton(text='ÿ•ÿ∂ÿßŸÅÿ© ÿØÿ±ÿØÿ¥ÿ©   ',
                                                     url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                     callback_data='invite_chat')
        kb_button_site = InlineKeyboardButton(text='ÿßŸÑŸÖŸàŸÇÿπ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä   ', url='https://redop.netlify.app', callback_data='our_site')
        kb_button_channel = InlineKeyboardButton(text='ŸÇŸÜÿßÿ™ŸÜÿß', url='https://t.me/official_redop', callback_data='our_channel')
        kb_button_change_language = InlineKeyboardButton(text='ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÑÿ∫ÿ©', callback_data='change_language')
        kb_start.add(kb_button_invite_chat, kb_button_channel)
        kb_start.add(kb_button_site, kb_button_commands)
        kb_start.add(kb_button_change_language)

        await call.message.answer("""List of commands in chats:
‚≠ê /warning - enables the notification for users, about the importance of non-disclosure of their personal data (enable)
‚≠ê /unwarning - turns off the notification for users about the importance of non-disclosure of their personal data (off)
‚≠ê /captcha - set captcha type
‚≠ê /KickRedFlag - causes all users that have been detected by the bot as malicious to be removed from the group
‚≠ê /ban - ban the user (send a chat message to the offender)
‚≠ê /unban {id-user} - Unban the user
‚≠ê /mute {minute} - make a user sick
‚≠ê /warn - give the user a warning (forward a chat message to the offender)
‚≠ê /acquit {id-user} - Clear all warnings of the user
‚≠ê /status - see information in chat
‚≠ê /pin - reply to the message to be pinned
‚≠ê /unpin - reply to a message that will be detached
‚≠ê /banlist - list of people banned
‚≠ê /forwardon - enable link blocking in posts for normal users
‚≠ê /forwardoff - disable link blocking in posts
‚≠ê /silenceon - disable chat
‚≠ê /silenceoff - turn on chat
‚≠ê /cdoctor - check the administrative rights of the bot in the group.
‚≠ê /reload_admins - list of chat admins.
‚≠ê /skipOldUsers - do not ask captcha for users with ID below 1.000.000.000
‚≠ê /unskipOldUsers - turn off skipOldUsers mode
‚≠ê /lock - all commands will be available only for admins
‚≠ê /unlock - give access to user commands to users
‚≠ê /attackon - make all bot commands unavailable
‚≠ê /attackoff - makes all bot commands available again
‚≠ê /deleteEntryMessage - deletes messages when a user joins a group
‚≠ê /undeleteEntryMessage - leave messages about user's joining the group
‚≠ê /greeting - inform user about passed captcha
‚≠ê /ungreeting - do not inform the user about passed captcha

Some <b>commands are only available to chat admins.</b>""", reply_markup=kb_start, parse_mode="HTML")

    else:
        kb_start = InlineKeyboardMarkup(resize_keyboard=True)
        kb_button_commands = InlineKeyboardButton(text='Learn about the capabilities of the bot',
                                                  callback_data='commands')
        kb_button_invite_chat = InlineKeyboardButton(text='Add a chat',
                                                     url='https://t.me/Redop_AntiSpam_bot?startgroup=hbase',
                                                     callback_data='invite_chat')
        kb_button_site = InlineKeyboardButton(text='Website', url='https://redop.netlify.app', callback_data='')
        kb_button_channel = InlineKeyboardButton(text='Our channel', url='https://t.me/official_redop',
                                                 callback_data='our_channel')
        kb_button_change_language = InlineKeyboardButton(text='Change language', callback_data='change_language')
        kb_start.add(kb_button_invite_chat, kb_button_channel)
        kb_start.add(kb_button_site, kb_button_commands)
        kb_start.add(kb_button_change_language)
        await call.message.answer("""List of commands in chats:
‚≠ê /warning - enables the notification for users, about the importance of non-disclosure of their personal data (enable)
‚≠ê /unwarning - turns off the notification for users about the importance of non-disclosure of their personal data (off)
‚≠ê /captcha - set captcha type
‚≠ê /KickRedFlag - causes all users that have been detected by the bot as malicious to be removed from the group
‚≠ê /ban - ban the user (send a chat message to the offender)
‚≠ê /unban {id-user} - Unban the user
‚≠ê /mute {minute} - make a user sick
‚≠ê /warn - give the user a warning (forward a chat message to the offender)
‚≠ê /acquit {id-user} - Clear all warnings of the user
‚≠ê /status - see information in chat
‚≠ê /pin - reply to the message to be pinned
‚≠ê /unpin - reply to a message that will be detached
‚≠ê /banlist - list of people banned
‚≠ê /forwardon - enable link blocking in posts for normal users
‚≠ê /forwardoff - disable link blocking in posts
‚≠ê /silenceon - disable chat
‚≠ê /silenceoff - turn on chat
‚≠ê /cdoctor - check the administrative rights of the bot in the group.
‚≠ê /reload_admins - list of chat admins.
‚≠ê /skipOldUsers - do not ask captcha for users with ID below 1.000.000.000
‚≠ê /unskipOldUsers - turn off skipOldUsers mode
‚≠ê /lock - all commands will be available only for admins
‚≠ê /unlock - give access to user commands to users
‚≠ê /attackon - make all bot commands unavailable
‚≠ê /attackoff - makes all bot commands available again
‚≠ê /deleteEntryMessage - deletes messages when a user joins a group
‚≠ê /undeleteEntryMessage - leave messages about user's joining the group
‚≠ê /greeting - inform user about passed captcha
‚≠ê /ungreeting - do not inform the user about passed captcha

Some <b>commands are only available to chat admins.</b>""", reply_markup=kb_start, parse_mode="HTML")

@dp.message_handler(commands=['help']) # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ/–≤ –ª—Å —Å –±–æ—Ç–æ–º –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å /help –∏ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def help_command(message: types.Message):
    await message.reply(text="""List of commands in chats:
‚≠ê /warning - enables the notification for users, about the importance of non-disclosure of their personal data (enable)
‚≠ê /unwarning - turns off the notification for users about the importance of non-disclosure of their personal data (off)
‚≠ê /captcha - set captcha type
‚≠ê /KickRedFlag - causes all users that have been detected by the bot as malicious to be removed from the group
‚≠ê /ban - ban the user (send a chat message to the offender)
‚≠ê /unban {id-user} - Unban the user
‚≠ê /mute {minute} - make a user sick
‚≠ê /warn - give the user a warning (forward a chat message to the offender)
‚≠ê /acquit {id-user} - Clear all warnings of the user
‚≠ê /status - see information in chat
‚≠ê /pin - reply to the message to be pinned
‚≠ê /unpin - reply to a message that will be detached
‚≠ê /banlist - list of people banned
‚≠ê /forwardon - enable link blocking in posts for normal users
‚≠ê /forwardoff - disable link blocking in posts
‚≠ê /silenceon - disable chat
‚≠ê /silenceoff - turn on chat
‚≠ê /cdoctor - check the administrative rights of the bot in the group.
‚≠ê /reload_admins - list of chat admins.
‚≠ê /skipOldUsers - do not ask captcha for users with ID below 1.000.000.000
‚≠ê /unskipOldUsers - turn off skipOldUsers mode
‚≠ê /lock - all commands will be available only for admins
‚≠ê /unlock - give access to user commands to users
‚≠ê /attackon - make all bot commands unavailable
‚≠ê /attackoff - makes all bot commands available again
‚≠ê /deleteEntryMessage - deletes messages when a user joins a group
‚≠ê /undeleteEntryMessage - leave messages about user's joining the group
‚≠ê /greeting - inform user about passed captcha
‚≠ê /ungreeting - do not inform the user about passed captcha

Some <b>commands are only available to chat admins.</b>""", parse_mode='HTML')


@dp.callback_query_handler(text='change_language') # –ö–Ω–æ–ø–∫–∞ –≤ –ª—Å –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
async def change_language_command(call: types.CallbackQuery):
    keyboard_language = InlineKeyboardMarkup()
    keyboard_language_button_ru = InlineKeyboardButton(text='üá∑üá∫–†—É—Å—Å–∫–∏–π', callback_data='ru')
    keyboard_language_button_eng = InlineKeyboardButton(text='üá¨üáßEnglish', callback_data='gb')
    keyboard_language_button_arab = InlineKeyboardButton(text='üá∏üá¶ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', callback_data='sa')
    keyboard_language_button_it = InlineKeyboardButton(text='üáÆüáπItaliano', callback_data='it')
    keyboard_language_button_esp = InlineKeyboardButton(text='üá™üá∏Espanol', callback_data='esp')
    keyboard_language_button_norw = InlineKeyboardButton(text='üá≥üá¥Norwegian', callback_data='norw')
    keyboard_language_button_ind = InlineKeyboardButton(text='üáÆüá©Indonesian', callback_data='ind')
    keyboard_language_button_rom = InlineKeyboardButton(text='üá∑üá¥Romanian', callback_data='rom')
    keyboard_language_button_slovak = InlineKeyboardButton(text='üá∏üá∞Slovak', callback_data='slov')
    keyboard_language_button_fin = InlineKeyboardButton(text='üá´üáÆFinnish', callback_data='fin')
    keyboard_language_button_eesti = InlineKeyboardButton(text='üá™üá™Eesti', callback_data='eesti')
    keyboard_language_button_port = InlineKeyboardButton(text='üáßüá∑Portugues Brasilüáµüáπ', callback_data='port_bras')
    keyboard_language_button_chin = InlineKeyboardButton(text='üá®üá≥Chinese', callback_data='chin')
    keyboard_language_button_deu = InlineKeyboardButton(text='üá©üá™Deutsch', callback_data='deu')
    keyboard_language_button_french = InlineKeyboardButton(text='üá´üá∑French', callback_data='fren')
    keyboard_language_button_czech = InlineKeyboardButton(text='üá®üáøCzech', callback_data='czech')
    keyboard_language_button_turk = InlineKeyboardButton(text='üáπüá∑Turkce', callback_data='turk')
    keyboard_language_button_cat = InlineKeyboardButton(text='üá™üá∏Catalan', callback_data='catalan')
    keyboard_language_button_hung = InlineKeyboardButton(text='üá≠üá∫Hungarian', callback_data='hung')
    keyboard_language_button_bulg = InlineKeyboardButton(text='üáßüá¨Bulgarian', callback_data='bulg')

    keyboard_language.add(keyboard_language_button_ru, keyboard_language_button_eng)
    keyboard_language.add(keyboard_language_button_arab, keyboard_language_button_it)
    keyboard_language.add(keyboard_language_button_esp, keyboard_language_button_norw)
    keyboard_language.add(keyboard_language_button_ind, keyboard_language_button_rom)
    keyboard_language.add(keyboard_language_button_slovak, keyboard_language_button_fin)
    keyboard_language.add(keyboard_language_button_eesti, keyboard_language_button_port)
    keyboard_language.add(keyboard_language_button_chin, keyboard_language_button_deu)
    keyboard_language.add(keyboard_language_button_french, keyboard_language_button_czech)
    keyboard_language.add(keyboard_language_button_turk, keyboard_language_button_cat)
    keyboard_language.add(keyboard_language_button_hung, keyboard_language_button_bulg)

    await call.message.answer('Choose language', reply_markup=keyboard_language)

@dp.message_handler(commands=['cdoctor']) # –∫–æ–º–∞–Ω–¥–∞ /cdoctor –≤ —á–∞—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
async def cdoctor_button(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            lock_chat = database.check_lock_chat(id_chat=message_chat_id)
            if lock_chat != []:
                user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
                user_id_is_admin = user_admin['status']
                if user_id_is_admin != 'member':
                    bot_status_in_chat = await bot.get_chat_administrators(chat_id=message_chat_id)
                    for bot_status in bot_status_in_chat:
                        if bot_status['user']['username'] == username_bot:
                            can_be_edited = bot_status['can_be_edited']
                            can_manage_chat = bot_status['can_manage_chat']
                            can_change_info = bot_status['can_change_info']
                            can_delete_messages = bot_status['can_delete_messages']
                            can_invite_users = bot_status['can_invite_users']
                            can_restrict_members = bot_status['can_restrict_members']
                            can_pin_messages = bot_status['can_pin_messages']
                            can_manage_topics = bot_status['can_manage_topics']
                            can_promote_members = bot_status['can_promote_members']
                            can_manage_video_chats = bot_status['can_manage_video_chats']
                            is_anonymous = bot_status['is_anonymous']
                            can_manage_voice_chats = bot_status['can_manage_voice_chats']
                            await message.answer(f"""
Bot rights in this chat:
<b>Can edit</b> - {can_be_edited}
<b>Can manage chat</b> - {can_manage_chat}
<b>Can change information</b> - {can_change_info}
<b>Can delete messages</b> - {can_delete_messages}
<b>Can invite new members</b> - {can_invite_users}
<b>Can restrict users in some way</b> - {can_restrict_members}
<b>Can pin messages</b> - {can_pin_messages}
<b>Can manage topics</b> - {can_manage_topics}
<b>Can promote users in anything</b> - {can_promote_members}
<b>Can manage video chats</b> - {can_manage_video_chats}
<b>Bot - anonymous</b> - {is_anonymous}
<b>Can manage voice chats</b> - {can_manage_voice_chats}
""", parse_mode='HTML')
                else:
                    await message.reply(text='You do not have permission to do this!')
            else:
                bot_status_in_chat = await bot.get_chat_administrators(chat_id=message_chat_id)
                for bot_status in bot_status_in_chat:
                    if bot_status['user']['username'] == username_bot:
                        can_be_edited = bot_status['can_be_edited']
                        can_manage_chat = bot_status['can_manage_chat']
                        can_change_info = bot_status['can_change_info']
                        can_delete_messages = bot_status['can_delete_messages']
                        can_invite_users = bot_status['can_invite_users']
                        can_restrict_members = bot_status['can_restrict_members']
                        can_pin_messages = bot_status['can_pin_messages']
                        can_manage_topics = bot_status['can_manage_topics']
                        can_promote_members = bot_status['can_promote_members']
                        can_manage_video_chats = bot_status['can_manage_video_chats']
                        is_anonymous = bot_status['is_anonymous']
                        can_manage_voice_chats = bot_status['can_manage_voice_chats']
                        await message.answer(f"""
Bot rights in this chat:
<b>Can edit</b> - {can_be_edited}
<b>Can manage chat</b> - {can_manage_chat}
<b>Can change information</b> - {can_change_info}
<b>Can delete messages</b> - {can_delete_messages}
<b>Can invite new members</b> - {can_invite_users}
<b>Can restrict users in some way</b> - {can_restrict_members}
<b>Can pin messages</b> - {can_pin_messages}
<b>Can manage topics</b> - {can_manage_topics}
<b>Can promote users in anything</b> - {can_promote_members}
<b>Can manage video chats</b> - {can_manage_video_chats}
<b>Bot - anonymous</b> - {is_anonymous}
<b>Can manage voice chats</b> - {can_manage_voice_chats}
""", parse_mode='HTML')

@dp.message_handler(commands=['reload_admins']) # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞
async def reload_admins_button(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            lock_chat = database.check_lock_chat(id_chat=message_chat_id)
            if lock_chat != []:
                user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
                user_id_is_admin = user_admin['status']
                if user_id_is_admin != 'member':
                    all_admins = await bot.get_chat_administrators(message_chat_id)
                    for admin in all_admins:
                        await message.answer(f' Chat Administrator:\n'
                                             f"@{admin['user']['username']} - {admin['user']['first_name']}"
                                             '')
                else:
                    await message.reply(text='You do not have permission to do this!')
            else:
                all_admins = await bot.get_chat_administrators(message_chat_id)
                for admin in all_admins:
                    await message.answer(f' Chat Administrator:\n'
                                         f"@{admin['user']['username']} - {admin['user']['first_name']}"
                                         '')

@dp.message_handler(commands=['status']) # —Ñ—É–Ω–∫—Ü–∏—è –¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∑–Ω–∞—Ç—å –∫—Ç–æ –æ–Ω –≤ –≥—Ä—É–ø–ø–µ
async def get_all_users_who_in_chat(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            chat_id = database.chat_id_in_list_chats(chat_id=message.chat.id)[0][0]
            user_warns = database.user_warns(message.from_user.id, chat_id=chat_id)
            if user_warns != []:
                all_users = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
                user_id = all_users['user']['id']
                first_name = all_users['user']['first_name']
                username = all_users['user']['username']
                status = all_users['status']
                await message.answer(f"""
            Info about <b>{username}</b>:
Your <b>ID</b>: {user_id}
<b>Name</b>: {first_name}
You have <b>{user_warns[0][1]} warnings!</b>
In the group you are <b>{status}!</b>
    
            """, parse_mode='HTML')
            else:
                all_users = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
                user_id = all_users['user']['id']
                first_name = all_users['user']['first_name']
                username = all_users['user']['username']
                status = all_users['status']
                await message.answer(f"""
            Info about <b>{username}</b>:
Your <b>ID</b>: {user_id}
<b>Name</b>: {first_name}
In the group you are <b>{status}!</b>
""", parse_mode='HTML')


@dp.message_handler(commands=['mute']) # –∫–æ–º–∞–Ω–¥–∞ –º—É—Ç–∞
async def mute_user(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                first_name_user_reply = message.reply_to_message.from_user.first_name
                id_user_reply = message.reply_to_message.from_user.id
                chat_id = database.chat_id_in_list_chats(chat_id=message.chat.id)[0][0]
                admin_or_no = database.user_in_admin_list(id_user_reply, chat_id=chat_id)
                if admin_or_no == []:  # –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                    try:
                        mute_valid = message.text.split(' ')
                        minutes = mute_valid[-1]
                        dt = datetime.datetime.now() + datetime.timedelta(minutes=int(minutes))
                        mute = bot.restrict_chat_member(message.chat.id, id_user_reply, until_date=dt.timestamp())
                        await mute
                        await message.reply(f'User <b>{first_name_user_reply}</b> has been muted for <b>{int(minutes)}</b> minutes!', parse_mode='HTML')
                    except Exception as ex:
                        await message.reply('Enter minutes!')
                else:
                    await message.reply("You can't muddy an admin!")
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['warn']) # –∫–æ–º–∞–Ω–¥–∞ –æ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
async def get_warn_user(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                try:
                    id_user_reply = message.reply_to_message.from_user.id
                    first_name_user_reply = message.reply_to_message.from_user.first_name
                    chat_id = database.chat_id_in_list_chats(chat_id=message.chat.id)[0][0]
                    admin_or_no = database.user_in_admin_list(id_user_reply, chat_id=chat_id)
                    print(admin_or_no)
                    if admin_or_no == []: # –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                        result = database.check_user_in_warn(id_user=id_user_reply, first_name=first_name_user_reply, status='member', chat_id=chat_id)
                        if result != None:
                            await message.reply(f'The user {id_user_reply} | {first_name_user_reply} already has {result} alerts, would you like to kick them?', reply_markup=kb_kick)
                        else:
                            await message.reply(f'User {id_user_reply} | {first_name_user_reply} received a warning!')
                    else:
                        await message.reply('You cannot report a moderator')
                except Exception as ex:
                    await message.reply('Forward along with the offending message!')
            else:
                await message.reply(text='You do not have permission to do this!')


@dp.callback_query_handler(text='yeskick') # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–∏–∫
async def kick_member(call: types.CallbackQuery):
    await call.message.delete()

    message_call = call.message.text
    id_user_to_kick = (message_call.split(' |'))[0]
    id_user_to_kick_right = (id_user_to_kick.split('The user ')[1]).replace(' ', '')

    chat_id = database.chat_id_in_list_chats(chat_id=call.message.chat.id)[0][0]

    database.add_user_ban_list(id_user=int(id_user_to_kick_right), by_admin=call.message.from_user.id, chat_id=chat_id)

    kick = bot.ban_chat_member(chat_id=call.message.chat.id, user_id=int(id_user_to_kick_right))
    await kick

@dp.message_handler(commands=['ban']) # –∫–æ–º–∞–Ω–¥–∞ –±–∞–Ω
async def ban_user(message: types.Message):
    message_call = message.chat.id
    if message_call < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_call)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                id_user_reply = message.reply_to_message.from_user.id
                first_name_user_reply = message.reply_to_message.from_user.first_name
                chat_id = database.chat_id_in_list_chats(chat_id=message.chat.id)[0][0]
                admin_or_no = database.user_in_admin_list(id_user_reply, chat_id=chat_id)
                if admin_or_no == []:
                    result = database.get_id_admin_in_list_admins(id_user=message.from_user.id, chat_id=chat_id)
                    database.add_user_ban_list(id_user=id_user_reply, by_admin=result[0][0], chat_id=chat_id)
                    kick = bot.ban_chat_member(chat_id=message.chat.id, user_id=int(id_user_reply))
                    await kick
                    await message.reply(f'User <b>{first_name_user_reply}</b> was successfully banned!', parse_mode='HTML')

                else:
                    await message.reply('You cannot ban an administrator!')
            else:
                await message.reply('You do not have permission to do this!')

@dp.message_handler(commands=['unban']) # —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def unban_users(message: types.Message):
    message_chat = message.chat.id
    if message_chat < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                try:
                    chat_id = database.chat_id_in_list_chats(chat_id=message.chat.id)[0][0]
                    id_user_banned = message.text.split(' ')[-1]
                    database.delete_user_ban_list(id_user=id_user_banned, chat_id=chat_id)
                    unban_user = bot.unban_chat_member(chat_id=message.chat.id, user_id=int(id_user_banned))
                    await unban_user
                    await message.reply('The user has been unbanned!')
                except Exception as ex:
                    await message.reply('Please enter a valid user id!')
            else:
                await message.reply('You do not have rights to this command!')

@dp.message_handler(commands=['banlist']) # —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –±–∞–Ω–µ
async def ban_list(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            chat_id = database.chat_id_in_list_chats(chat_id=message.chat.id)[0][0]
            result = database.ban_list_users(chat_id=chat_id)
            if result == []:
                await message.answer('There are no banned users!')
            else:
                myData = result
                myFile = open('banned.csv', 'w')
                with myFile:
                    writer = csv.writer(myFile)
                    writer.writerows(myData)

                await message.reply_document(open('banned.csv', 'rb'))

@dp.callback_query_handler(text='nokick') # –Ω–µ –∫–∏–∫–∞—Ç—å (–∫–æ–º–∞–Ω–¥–∞)
async def delete_message_to_kick(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

@dp.message_handler(commands=['acquit'])
async def acquit_user_warns(message: types.Message):
    message_call = message.chat.id
    if message_call < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_call)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                try:
                    id_user_reply = message.reply_to_message.from_user.id
                    chat_id = database.chat_id_in_list_chats(chat_id=message.chat.id)[0][0]
                    database.acquit_all_warns_user(id_user=id_user_reply, chat_id=chat_id)
                    await message.reply('<b>All warnings have been successfully removed!</b>', parse_mode='HTML')
                except Exception as ex:
                    await message.reply('Forward along with the offending message!')
            else:
                await message.reply('You do not have permission to do this')


@dp.message_handler(commands=['pin'])
async def pin_message(message: types.Message):
    message_call = message.chat.id
    if message_call < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_call)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                try:
                    id_message_reply = message.reply_to_message.message_id
                    pin = bot.pin_chat_message(chat_id=message.chat.id, message_id=id_message_reply)
                    await pin
                    await message.reply('<b>Message pinned successfully!</b>', parse_mode='HTML')
                except Exception as ex:
                    await message.reply('Forward the message you want to pin!')
            else:
                await message.reply('You do not have permission to do this!')

@dp.message_handler(commands=['unpin'])
async def unpin_message(message: types.Message):
    message_call = message.chat.id
    if message_call < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_call)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                try:
                    id_message_reply = message.reply_to_message.message_id
                    pin = bot.unpin_chat_message(chat_id=message.chat.id, message_id=id_message_reply)
                    await pin
                    await message.reply('<b>Post successfully unpinned!</b>', parse_mode='HTML')
                except Exception as ex:
                    await message.reply('Forward the message you want to unpin!')
            else:
                await message.reply('You do not have permission to do this!')

@dp.message_handler(commands=['kick'])
async def kick_user_from_chat(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                first_name_user_reply = message.reply_to_message.from_user.first_name
                id_user_reply = message.reply_to_message.from_user.id
                chat_id = database.chat_id_in_list_chats(chat_id=message.chat.id)[0][0]
                admin_or_no = database.user_in_admin_list(id_user_reply, chat_id=chat_id)
                if admin_or_no == []:
                    try:
                        mute_valid = message.text.split(' ')
                        minutes = mute_valid[-1]
                        dt = datetime.datetime.now() + datetime.timedelta(minutes=int(minutes))
                        mute = bot.kick_chat_member(message.chat.id, id_user_reply, until_date=dt.timestamp())
                        await mute
                        await message.reply(
                            f'User <b>{first_name_user_reply}</b> got kicked for<b>{int(minutes)}</b> minutes!',
                            parse_mode='HTML')
                    except Exception as ex:
                        await message.reply('Enter minutes!')
                else:
                    await message.reply('You cannot kick an admin!')
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['silenceon'])
async def silence_on_chat(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.silence_on(chat_id=message.chat.id)
                await message.reply('<b>Chat is now unable to speak!</b>', parse_mode='HTML')
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['silenceoff'])
async def silence_off_chat(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.silence_off(chat_id=message.chat.id)
                await message.reply('<b>Chat can now speak!</b>', parse_mode='HTML')
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['forwardon'])
async def forward_on_chat(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.forward_on(chat_id=message.chat.id)
                await message.reply('<b>Link blocking activated!</b>', parse_mode='HTML')
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(commands=['forwardoff'])
async def forward_off_chat(message: types.Message):
    message_chat_id = message.chat.id
    if message_chat_id < 0:
        captcha_now = database.get_user_captcha_chat(id_user=message.from_user.id)
        if captcha_now != []:
            await message.delete()
            await message.answer('You need to pass the captcha the bot sent you')
            await message.delete()
        check_attack = database.get_attack_chat(id_chat=message_chat_id)
        if check_attack[0][0] == True:
            pass
        else:
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin != 'member':
                database.forward_off(chat_id=message.chat.id)
                await message.reply('<b>Link blocking disabled!</b>', parse_mode='HTML')
            else:
                await message.reply(text='You do not have permission to do this!')

@dp.message_handler(content_types=['new_chat_members'])
async def new_member(message: types.Message):
    who_invite = message.from_user.id
    all_admins = await bot.get_chat_administrators(chat_id=message.chat.id)
    x = 0
    for admin in all_admins:
        print(admin)
        if admin['user']['id'] == who_invite:
            x = 1
    print(x)
    if x == 0:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ –∏ –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        images = bot.get_user_profile_photos(user_id=who_invite, limit=1)
        if images == [] and who_invite > 7000000000:
            database.add_table_user_kdf(id_user=who_invite, id_chat=message.chat.id)
        try:
            language_captcha = database.get_language_captcha(id_chat=message.chat.id)[0][0]
        except Exception as ex:
            language_captcha = []
        captcha_type = database.get_type_captcha(id_chat=message.chat.id)[0][0]
        print(captcha_type)
        skipoldusers = database.skipoldusers_check(id_chat=message.chat.id)
        check_entry = database.get_entry_chat(id_chat=message.chat.id)
        if check_entry != []:
            await message.delete()
        try:
            if skipoldusers[0][0] == True:
                if message.from_user.id < 1000000000:
                    print(2)
                    pass
                else:
                    if captcha_type == 4:
                        if language_captcha == []:
                            random_message = random.randint(1, 10)
                            word = database.get_math_example(number=random_message)[0][0]
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            await message.answer(f"""
                                                {message.from_user.first_name}, —Åhat out the solution to this example  {word[0][1]} {word[0][3]} {word[0][2]} !\nYou have 60 seconds
                                                """)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=4,
                                                     day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1)
                        elif language_captcha[0][0] == 'ru':
                            random_message = random.randint(1, 10)
                            word = database.get_math_example(number=random_message)[0][0]
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            await message.answer(f"""
                                                {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Ä–µ—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞  {word[0][1]} {word[0][3]} {word[0][2]} !\n–£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
                                                """)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=4,
                                                     day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1)
                        elif language_captcha[0][0] == 'gb':
                            random_message = random.randint(1, 10)
                            word = database.get_math_example(number=random_message)[0][0]
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            await message.answer(f"""
                                                {message.from_user.first_name}, —Åhat out the solution to this example  {word[0][1]} {word[0][3]} {word[0][2]} !\nYou have 60 seconds
                                                """)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=4,
                                                     day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1)

                    if captcha_type == 3:
                        if language_captcha == []:
                            random_message = random.randint(1, 12)
                            word = database.get_secret_word(number=random_message)[0][0]
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            await message.answer(f"""
                                                {message.from_user.first_name}, write a code word in the chat room - {word}!\nYou have 60 seconds.
                                                """)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,
                                                     day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1)

                        elif language_captcha[0][0] == 'ru':
                            random_message = random.randint(1, 12)
                            word = database.get_secret_word(number=random_message)[0][0]
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            await message.answer(f"""
                                                {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ - {word}!\n–£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
                                                """)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,
                                                     day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1)

                        elif language_captcha[0][0] == 'gb':
                            random_message = random.randint(1, 12)
                            word = database.get_secret_word(number=random_message)[0][0]
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            await message.answer(f"""
                                                {message.from_user.first_name}, write a code word in the chat room - {word}!\nYou have 60 seconds.
                                                """)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,
                                                     day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1)

                    if captcha_type == 1:
                        if language_captcha == []:
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            await message.answer(f"""
    {message.from_user.first_name}, Write something in the chat room so we know you're not a bot!\nYou have 60 seconds
                                                """)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=1,
                                                     day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1)

                        elif language_captcha[0][0] == 'ru':
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            await message.answer(f"""
    {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —á–∞—Ç, —Ç–∞–∫ –º—ã –ø–æ–π–º–µ–º, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç!\n–£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
                                                """)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=1,
                                                     day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1)

                        elif language_captcha[0][0] == 'gb':
                            random_message = random.randint(1, 12)
                            word = database.get_secret_word(number=random_message)[0][0]
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            await message.answer(f"""
    {message.from_user.first_name}, Write something in the chat room so we know you're not a bot!\nYou have 60 seconds
                                                """)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=1,
                                                     day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1)

                    if captcha_type == 2: # ===F=GFG=DG
                        digit = random.randint(1, 7)
                        print('fsdfsdfs')
                        if language_captcha == []:
                            if digit == 1:
                                img = open('bot/images/captcha_apple.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_1)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )
                            if digit == 2:
                                img = open('bot/images/captcha_cucumber.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_2)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 3:
                                img = open('bot/images/captcha_grape.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_3)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 4:
                                img = open('bot/images/captcha_pizza.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_4)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 5:
                                img = open('bot/images/captcha_pretzel.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_5)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 6:
                                img = open('bot/images/captcha_cherry.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_6)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 7:
                                img = open('bot/images/captcha_banana.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_7)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                        elif language_captcha[0][0] == 'ru':
                            if digit == 1:
                                img = open('bot/images/captcha_apple.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                     reply_markup=kb_captcha_1)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )
                            if digit == 2:
                                img = open('bot/images/captcha_cucumber.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                     reply_markup=kb_captcha_2)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 3:
                                img = open('bot/images/captcha_grape.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                     reply_markup=kb_captcha_3)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 4:
                                img = open('bot/images/captcha_pizza.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                     reply_markup=kb_captcha_4)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 5:
                                img = open('bot/images/captcha_pretzel.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                     reply_markup=kb_captcha_5)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 6:
                                img = open('bot/images/captcha_cherry.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                     reply_markup=kb_captcha_6)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 7:
                                img = open('bot/images/captcha_banana.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                     reply_markup=kb_captcha_7)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                        elif language_captcha[0][0] == 'gb':
                            if digit == 1:
                                img = open('bot/images/captcha_apple.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_1)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )
                            if digit == 2:
                                img = open('bot/images/captcha_cucumber.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_2)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 3:
                                img = open('bot/images/captcha_grape.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_3)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 4:
                                img = open('bot/images/captcha_pizza.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_4)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 5:
                                img = open('bot/images/captcha_pretzel.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_5)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 6:
                                img = open('bot/images/captcha_cherry.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_6)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )

                            if digit == 7:
                                img = open('bot/images/captcha_banana.jpg', 'rb')
                                await bot.send_photo(message.chat.id, photo=img,
                                                     caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                     reply_markup=kb_captcha_7)
                                time_now = datetime.datetime.now()
                                time_lose = time_now + datetime.timedelta(minutes=1)
                                database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                         day=datetime.datetime.now().day,
                                                         month=datetime.datetime.now().month,
                                                         year=datetime.datetime.now().year,
                                                         h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                         s1=datetime.datetime.now().second,
                                                         h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                         message_id=message.message_id + 1
                                                         )



            else:
                if captcha_type == 4:
                    print('russsiiiia')
                    print(language_captcha)
                    if language_captcha == []:
                        print('no')
                        random_message = random.randint(1, 9)
                        word = database.get_math_example(number=random_message)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        await message.answer(f"""
                                            {message.from_user.first_name}, —Åhat out the solution to this example  {word[0][1]} {word[0][3]} {word[0][2]} !\nYou have 60 seconds
                                            """)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=4,
                                                 day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1)

                    elif language_captcha == 'ru':
                        print('ru')
                        random_message = random.randint(1, 9)
                        word = database.get_math_example(number=random_message)
                        print(word)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        await message.answer(f"""
                                            {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Ä–µ—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞  {word[0][1]} {word[0][3]} {word[0][2]} !\n–£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
                                            """)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=4,
                                                 day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1)

                    elif language_captcha == 'gb':
                        print('gb')
                        random_message = random.randint(1, 9)
                        word = database.get_math_example(number=random_message)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        await message.answer(f"""
                                            {message.from_user.first_name}, —Åhat out the solution to this example  {word[0][1]} {word[0][3]} {word[0][2]} !\nYou have 60 seconds
                                            """)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=4,
                                                 day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1)

                if captcha_type == 3:
                    if language_captcha == []:
                        random_message = random.randint(1, 12)
                        word = database.get_secret_word(number=random_message)[0][0]
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        await message.answer(f"""
                                            {message.from_user.first_name}, write a code word in the chat room - {word}!\nYou have 60 seconds.
                                            """)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,  type=3,
                                                 day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1)

                    elif language_captcha[0][0] == 'ru':
                        random_message = random.randint(1, 12)
                        word = database.get_secret_word(number=random_message)[0][0]
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        await message.answer(f"""
                                            {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ - {word}!\n–£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
                                            """)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=3,
                                                 day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1)

                    elif language_captcha[0][0] == 'gb':
                        random_message = random.randint(1, 12)
                        word = database.get_secret_word(number=random_message)[0][0]
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        await message.answer(f"""
                                            {message.from_user.first_name}, write a code word in the chat room - {word}!\nYou have 60 seconds.
                                            """)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=3,
                                                 day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1)

                if captcha_type == 1:
                    if language_captcha == []:
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        await message.answer(f"""
                    {message.from_user.first_name}, Write something in the chat room so we know you're not a bot!\nYou have 60 seconds
                                                                """)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=1,
                                                 day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1)

                    elif language_captcha[0][0] == 'ru':
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        await message.answer(f"""
                    {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —á–∞—Ç, —Ç–∞–∫ –º—ã –ø–æ–π–º–µ–º, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç!\n–£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
                                                                """)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=1,
                                                 day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1)

                    elif language_captcha[0][0] == 'gb':
                        random_message = random.randint(1, 12)
                        word = database.get_secret_word(number=random_message)[0][0]
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        await message.answer(f"""
                    {message.from_user.first_name}, Write something in the chat room so we know you're not a bot!\nYou have 60 seconds
                                                                """)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=1,
                                                 day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1)
                if captcha_type == 2:
                    print('fsdfs') # tyt
                    digit = random.randint(1, 7)
                    print(digit)
                    print(language_captcha)
                    if language_captcha == []:
                        if digit == 1:
                            img = open('bot/images/captcha_apple.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_1)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )
                        if digit == 2:
                            img = open('bot/images/captcha_cucumber.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_2)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 3:
                            img = open('bot/images/captcha_grape.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_3)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 4:
                            img = open('bot/images/captcha_pizza.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_4)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 5:
                            img = open('bot/images/captcha_pretzel.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_5)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 6:
                            img = open('bot/images/captcha_cherry.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_6)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 7:
                            img = open('bot/images/captcha_banana.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_7)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                    elif language_captcha == 'ru':
                        if digit == 1:
                            img = open('bot/images/captcha_apple.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                 reply_markup=kb_captcha_1)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )
                        if digit == 2:
                            img = open('bot/images/captcha_cucumber.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                 reply_markup=kb_captcha_2)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 3:
                            img = open('bot/images/captcha_grape.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                 reply_markup=kb_captcha_3)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 4:
                            img = open('bot/images/captcha_pizza.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                 reply_markup=kb_captcha_4)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 5:
                            img = open('bot/images/captcha_pretzel.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                 reply_markup=kb_captcha_5)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 6:
                            img = open('bot/images/captcha_cherry.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                 reply_markup=kb_captcha_6)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 7:
                            img = open('bot/images/captcha_banana.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                                 reply_markup=kb_captcha_7)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                    elif language_captcha == 'gb':
                        if digit == 1:
                            img = open('bot/images/captcha_apple.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_1)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )
                        if digit == 2:
                            img = open('bot/images/captcha_cucumber.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_2)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 3:
                            img = open('bot/images/captcha_grape.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_3)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 4:
                            img = open('bot/images/captcha_pizza.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_4)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 5:
                            img = open('bot/images/captcha_pretzel.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_5)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 6:
                            img = open('bot/images/captcha_cherry.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_6)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )

                        if digit == 7:
                            img = open('bot/images/captcha_banana.jpg', 'rb')
                            await bot.send_photo(message.chat.id, photo=img,
                                                 caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                                 reply_markup=kb_captcha_7)
                            time_now = datetime.datetime.now()
                            time_lose = time_now + datetime.timedelta(minutes=1)
                            database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                     day=datetime.datetime.now().day,
                                                     month=datetime.datetime.now().month,
                                                     year=datetime.datetime.now().year,
                                                     h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                     s1=datetime.datetime.now().second,
                                                     h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                     message_id=message.message_id + 1
                                                     )
        except Exception as ex:
            if captcha_type == 4:
                if language_captcha == []:
                    random_message = random.randint(1, 10)
                    word = database.get_math_example(number=random_message)
                    time_now = datetime.datetime.now()
                    time_lose = time_now + datetime.timedelta(minutes=1)
                    await message.answer(f"""
                                        {message.from_user.first_name}, —Åhat out the solution to this example  {word[0][1]} {word[0][3]} {word[0][2]} !\nYou have 60 seconds
                                        """)
                    database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=4,
                                             day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                             year=datetime.datetime.now().year,
                                             h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                             s1=datetime.datetime.now().second,
                                             h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                             message_id=message.message_id + 1)

                elif language_captcha[0][0] == 'ru':
                    random_message = random.randint(1, 10)
                    word = database.get_math_example(number=random_message)
                    time_now = datetime.datetime.now()
                    time_lose = time_now + datetime.timedelta(minutes=1)
                    await message.answer(f"""
                                        {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Ä–µ—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞  {word[0][1]} {word[0][3]} {word[0][2]} !\n–£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
                                        """)
                    database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=4,
                                             day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                             year=datetime.datetime.now().year,
                                             h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                             s1=datetime.datetime.now().second,
                                             h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                             message_id=message.message_id + 1)

                elif language_captcha[0][0] == 'gb':
                    random_message = random.randint(1, 10)
                    word = database.get_math_example(number=random_message)
                    time_now = datetime.datetime.now()
                    time_lose = time_now + datetime.timedelta(minutes=1)
                    await message.answer(f"""
                                        {message.from_user.first_name}, —Åhat out the solution to this example  {word[0][1]} {word[0][3]} {word[0][2]} !\nYou have 60 seconds
                                        """)
                    database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=4,
                                             day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                             year=datetime.datetime.now().year,
                                             h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                             s1=datetime.datetime.now().second,
                                             h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                             message_id=message.message_id + 1)

            if captcha_type == 3:
                if language_captcha == []:
                    random_message = random.randint(1, 12)
                    word = database.get_secret_word(number=random_message)[0][0]
                    time_now = datetime.datetime.now()
                    time_lose = time_now + datetime.timedelta(minutes=1)
                    await message.answer(f"""
                                        {message.from_user.first_name}, write a code word in the chat room - {word}!\nYou have 60 seconds.
                                        """)
                    database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,
                                             day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                             year=datetime.datetime.now().year,
                                             h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                             s1=datetime.datetime.now().second,
                                             h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                             message_id=message.message_id + 1)

                elif language_captcha[0][0] == 'ru':
                    random_message = random.randint(1, 12)
                    word = database.get_secret_word(number=random_message)[0][0]
                    time_now = datetime.datetime.now()
                    time_lose = time_now + datetime.timedelta(minutes=1)
                    await message.answer(f"""
                                        {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ - {word}!\n–£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
                                        """)
                    database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,
                                             day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                             year=datetime.datetime.now().year,
                                             h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                             s1=datetime.datetime.now().second,
                                             h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                             message_id=message.message_id + 1)

                elif language_captcha[0][0] == 'gb':
                    random_message = random.randint(1, 12)
                    word = database.get_secret_word(number=random_message)[0][0]
                    time_now = datetime.datetime.now()
                    time_lose = time_now + datetime.timedelta(minutes=1)
                    await message.answer(f"""
                                        {message.from_user.first_name}, write a code word in the chat room - {word}!\nYou have 60 seconds.
                                        """)
                    database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,
                                             day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                             year=datetime.datetime.now().year,
                                             h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                             s1=datetime.datetime.now().second,
                                             h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                             message_id=message.message_id + 1)

            if captcha_type == 1:
                if language_captcha == []:
                    time_now = datetime.datetime.now()
                    time_lose = time_now + datetime.timedelta(minutes=1)
                    await message.answer(f"""
                {message.from_user.first_name}, Write something in the chat room so we know you're not a bot!\nYou have 60 seconds
                                                            """)
                    database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,
                                             day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                             year=datetime.datetime.now().year,
                                             h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                             s1=datetime.datetime.now().second,
                                             h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                             message_id=message.message_id + 1, type=1)

                elif language_captcha[0][0] == 'ru':
                    time_now = datetime.datetime.now()
                    time_lose = time_now + datetime.timedelta(minutes=1)
                    await message.answer(f"""
                {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —á–∞—Ç, —Ç–∞–∫ –º—ã –ø–æ–π–º–µ–º, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç!\n–£ —Ç–µ–±—è –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥
                                                            """)
                    database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,
                                             day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                             year=datetime.datetime.now().year,
                                             h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                             s1=datetime.datetime.now().second,
                                             h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                             message_id=message.message_id + 1, type=1)

                elif language_captcha[0][0] == 'gb':
                    random_message = random.randint(1, 12)
                    word = database.get_secret_word(number=random_message)[0][0]
                    time_now = datetime.datetime.now()
                    time_lose = time_now + datetime.timedelta(minutes=1)
                    await message.answer(f"""
                {message.from_user.first_name}, Write something in the chat room so we know you're not a bot!\nYou have 60 seconds
                                                            """)
                    database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id,
                                             day=datetime.datetime.now().day, month=datetime.datetime.now().month,
                                             year=datetime.datetime.now().year,
                                             h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                             s1=datetime.datetime.now().second,
                                             h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                             message_id=message.message_id + 1, type=1)

            if captcha_type == 2:
                print('fsdf–∞—ã–≤–∞—ã–≤–∞—ã–≤–∞—ã–≤–∞—ãs')

                digit = random.randint(1, 7)
                if language_captcha == []:
                    if digit == 1:
                        img = open('bot/images/captcha_apple.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_1)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )
                    if digit == 2:
                        img = open('bot/images/captcha_cucumber.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_2)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 3:
                        img = open('bot/images/captcha_grape.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_3)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 4:
                        img = open('bot/images/captcha_pizza.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_4)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 5:
                        img = open('bot/images/captcha_pretzel.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_5)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 6:
                        img = open('bot/images/captcha_cherry.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_6)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 7:
                        img = open('bot/images/captcha_banana.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_7)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                elif language_captcha[0][0] == 'ru':
                    if digit == 1:
                        img = open('bot/images/captcha_apple.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                             reply_markup=kb_captcha_1)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )
                    if digit == 2:
                        img = open('bot/images/captcha_cucumber.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                             reply_markup=kb_captcha_2)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 3:
                        img = open('bot/images/captcha_grape.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                             reply_markup=kb_captcha_3)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 4:
                        img = open('bot/images/captcha_pizza.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                             reply_markup=kb_captcha_4)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 5:
                        img = open('bot/images/captcha_pretzel.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                             reply_markup=kb_captcha_5)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 6:
                        img = open('bot/images/captcha_cherry.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                             reply_markup=kb_captcha_6)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 7:
                        img = open('bot/images/captcha_banana.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É!\n–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
                                             reply_markup=kb_captcha_7)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                elif language_captcha[0][0] == 'gb':
                    if digit == 1:
                        img = open('bot/images/captcha_apple.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_1)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )
                    if digit == 2:
                        img = open('bot/images/captcha_cucumber.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_2)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 3:
                        img = open('bot/images/captcha_grape.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_3)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 4:
                        img = open('bot/images/captcha_pizza.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_4)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 5:
                        img = open('bot/images/captcha_pretzel.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_5)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 6:
                        img = open('bot/images/captcha_cherry.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_6)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

                    if digit == 7:
                        img = open('bot/images/captcha_banana.jpg', 'rb')
                        await bot.send_photo(message.chat.id, photo=img,
                                             caption=f"{message.from_user.id}|You need to pass the captcha!\nWhat is shown in the picture?",
                                             reply_markup=kb_captcha_7)
                        time_now = datetime.datetime.now()
                        time_lose = time_now + datetime.timedelta(minutes=1)
                        database.add_user_captha(id_user=message.from_user.id, id_chat=message.chat.id, type=2,
                                                 day=datetime.datetime.now().day,
                                                 month=datetime.datetime.now().month,
                                                 year=datetime.datetime.now().year,
                                                 h1=datetime.datetime.now().hour, m1=datetime.datetime.now().minute,
                                                 s1=datetime.datetime.now().second,
                                                 h2=time_lose.hour, m2=time_lose.minute, s2=time_lose.second,
                                                 message_id=message.message_id + 1
                                                 )

@dp.message_handler(commands=['captcha'])
async def capctha_command(message: types.Message):
    if message.chat.id < 0:
        user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
        user_id_is_admin = user_admin['status']
        if user_id_is_admin != 'member':
            keyboard_captcha = InlineKeyboardMarkup(row_width=4)
            keyboard_captcha_button1 = InlineKeyboardButton(text='Simple', callback_data='standart_captcha')
            keyboard_captcha_button2 = InlineKeyboardButton(text='Button', callback_data='highstandart_captcha')
            keyboard_captcha_button3 = InlineKeyboardButton(text='Word', callback_data='word_captcha')
            keyboard_captcha_button4 = InlineKeyboardButton(text='Math', callback_data='math_ex')
            keyboard_captcha.add(keyboard_captcha_button1, keyboard_captcha_button2, keyboard_captcha_button3, keyboard_captcha_button4)
            await message.answer(f"""
<b>Please, select the test type for the newcomers:</b>\n\n¬∑ <b>Simple</b> - bot will ask to send anything to the chat\n¬∑ <b>Word</b> - bot will aks to send word\n¬∑ <b>Button</b> - bot will ask to press a button-captcha\n¬∑ <b>Math</b> - bot will ask to pass the example""", reply_markup=keyboard_captcha, parse_mode='HTML')
        else:
            await message.reply(text='You do not have permission to do this!')


@dp.callback_query_handler(text='math_ex')
async def meth_ex_command(call: types.CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    id_chat = database.chat_id_in_list_chats(chat_id=chat_id)[0][0]
    status = database.get_id_admin_in_list_admins(id_user=user_id, chat_id=id_chat)
    if status != []:
        await call.message.delete()
        database.update_type_captcha(id_chat=chat_id, type=4)
    else:
        await call.answer(text='You do not have permission to do this!')

@dp.callback_query_handler(text='word_captcha')
async def word_captcha_command(call: types.CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    id_chat = database.chat_id_in_list_chats(chat_id=chat_id)[0][0]
    status = database.get_id_admin_in_list_admins(id_user=user_id, chat_id=id_chat)
    if status != []:
        await call.message.delete()
        database.update_type_captcha(id_chat=chat_id, type=3)
    else:
        await call.answer(text='You do not have permission to do this!')
@dp.callback_query_handler(text='highstandart_captcha')
async def highstandart_captcha_command(call: types.CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    id_chat = database.chat_id_in_list_chats(chat_id=chat_id)[0][0]
    status = database.get_id_admin_in_list_admins(id_user=user_id, chat_id=id_chat)
    if status != []:
        await call.message.delete()
        database.update_type_captcha(id_chat=chat_id, type=2)
    else:
        await call.answer(text='You do not have permission to do this!')


@dp.callback_query_handler(text='standart_captcha')
async def standart_captcha_command(call: types.CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    id_chat = database.chat_id_in_list_chats(chat_id=chat_id)[0][0]
    status = database.get_id_admin_in_list_admins(id_user=user_id, chat_id=id_chat)
    if status != []:
        await call.message.delete()
        database.update_type_captcha(id_chat=chat_id, type=1)
    else:
        await call.answer(text='You do not have permission to do this!')


@dp.callback_query_handler(text='captcha_win')
async def captcha_win_user(call: types.CallbackQuery):
    message_text = call.message.html_text
    correct_user = message_text.split('|')[0]
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    if int(correct_user) == user_id:
        user_captcha = database.check_user_captcha(id_user=user_id, id_chat=chat_id)
        print(user_captcha)
        time_now = datetime.datetime.now()
        nashe_vremya = datetime.datetime(time_now.year, time_now.month, time_now.day, time_now.hour, time_now.minute,
                                         time_now.second)
        dedlain_kto_napisal_nam = datetime.datetime(user_captcha[0][6], user_captcha[0][5], user_captcha[0][4],
                                                    user_captcha[0][10], user_captcha[0][11], user_captcha[0][12])
        checking = int((dedlain_kto_napisal_nam - nashe_vremya).days)
        print(checking)
        if checking <= -1:
            await bot.kick_chat_member(chat_id=user_captcha[0][2], user_id=user_captcha[0][1])
            await bot.delete_message(chat_id=user_captcha[0][2], message_id=user_captcha[0][13])
            await bot.delete_message(chat_id=user_captcha[0][2], message_id=user_captcha[0][13])
            database.delete_captcha_user(id_user=user_captcha[0][1], id_chat=user_captcha[0][2])

        else:
            database.delete_captcha_user(id_user=user_id, id_chat=chat_id)
            await bot.delete_message(chat_id=chat_id, message_id=user_captcha[0][13])
            await bot.delete_message(chat_id=chat_id, message_id=user_captcha[0][13])
    else:
        pass

@dp.callback_query_handler(text='captcha_lose')
async def captcha_lose_user(call: types.CallbackQuery):
    message_text = call.message.html_text
    correct_user = message_text.split('|')[0]
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    if int(correct_user) == user_id:
        user_captcha = database.check_user_captcha(id_user=user_id, id_chat=chat_id)
        await bot.kick_chat_member(chat_id=user_captcha[0][2], user_id=user_captcha[0][1])
        await bot.delete_message(chat_id=user_captcha[0][2], message_id=user_captcha[0][13])
        await bot.delete_message(chat_id=user_captcha[0][2], message_id=user_captcha[0][13])
        database.delete_captcha_user(id_user=user_captcha[0][1], id_chat=user_captcha[0][2])
    else:
        pass

@dp.message_handler()
async def get_message_from_group(message: types.Message):
    if message.chat.id < 0:
        chat_id = message.chat.id
        info_chat = await bot.get_chat(chat_id=chat_id)
        creator_chat = await bot.get_chat_administrators(chat_id)
        for creator in creator_chat:
            if creator['status'] == 'creator':
                id_creator = creator['user']['id']
        id_chat = info_chat['id']
        title_chat = info_chat['title']
        invite_link = info_chat['invite_link']

        add_chat = database.check_chat_in_all_chats(chat_id=chat_id, name_chat=title_chat, link_chat=invite_link, creator=int(id_creator))
        if add_chat != False:
            await message.answer("Make sure @Redop_AntiSpam_bot is your chat administrator. To fully familiarize yourself with our telegram bot, you can click on the button to learn about our bot's features, inside the menu of our bot.")
        list_chat_admins = await bot.get_chat_administrators(chat_id=chat_id)
        for admin in list_chat_admins:
            user_id = admin['user']['id']
            first_name = admin['user']['first_name']
            status = admin['status']
            chat_id = id_chat
            id_chat_in_list_chat = database.chat_id_in_list_chats(chat_id=chat_id)[0][0]
            database.check_admins_in_list_chat(id_user=user_id, first_name=first_name, status=status, chat_id=id_chat_in_list_chat)


        user_captcha = database.check_user_captcha(id_user=message.from_user.id, id_chat=message.chat.id)
        if user_captcha == []:
            all_users = database.check_all_users_captcha()
            for user in all_users:
                time_now = datetime.datetime.now()
                dt1 = datetime.datetime(time_now.year, time_now.month, time_now.day, time_now.hour, time_now.minute,
                                        time_now.second)
                dt2 = datetime.datetime(user[6], user[5], user[4], user[10], user[11], user[12])
                dt3 = int((dt2 - dt1).days)
                print(dt3)
                if dt3 < 0:
                    print(user)
                    await bot.kick_chat_member(chat_id=user[2], user_id=user[1])
                    await bot.delete_message(chat_id=user[2], message_id=user[13])
                    await bot.delete_message(chat_id=user[2], message_id=message.message_id)
                else:
                    pass

        else:
            type = database.get_type_captcha(id_chat=message.chat.id)[0][0]
            if type == 4:
                get_word = database.get_result_value(word=int(message.text))
                if get_word == []:
                    await bot.kick_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
                    await bot.delete_message(chat_id=message.chat.id, message_id=user_captcha[0][13])
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                else:
                    database.delete_captcha_user(id_user=message.from_user.id, id_chat=chat_id)
                    await bot.delete_message(chat_id=chat_id, message_id=user_captcha[0][13])
                    await bot.delete_message(chat_id=chat_id, message_id=message.message_id)


            if type == 3:
                get_word = database.get_word_value(word=message.text)
                if get_word == []:
                    await bot.kick_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
                    await bot.delete_message(chat_id=message.chat.id, message_id=user_captcha[0][13])
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

                else:
                    database.delete_captcha_user(id_user=message.from_user.id, id_chat=chat_id)
                    await bot.delete_message(chat_id=chat_id, message_id=user_captcha[0][13])
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

            else:
                user_id = message.from_user.id
                chat_id = message.chat.id
                captcha_type = database.get_type_captcha(id_chat=chat_id)[0][0]
                if captcha_type == 1:
                    time_now = datetime.datetime.now()
                    nashe_vremya = datetime.datetime(time_now.year, time_now.month, time_now.day, time_now.hour, time_now.minute,
                                                     time_now.second)
                    dedlain_kto_napisal_nam = datetime.datetime(user_captcha[0][6], user_captcha[0][5], user_captcha[0][4],
                                                                user_captcha[0][10], user_captcha[0][11], user_captcha[0][12])
                    checking = int((dedlain_kto_napisal_nam - nashe_vremya).days)
                    print(checking)
                    if checking < 0:
                        await bot.kick_chat_member(chat_id=user_captcha[0][2], user_id=user_captcha[0][1])
                        await bot.delete_message(chat_id=user_captcha[0][2], message_id=user_captcha[0][13])
                        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                        database.delete_captcha_user(id_user=user_captcha[0][1], id_chat=user_captcha[0][2])


                    else:
                        database.delete_captcha_user(id_user=user_id, id_chat=chat_id)
                        await bot.delete_message(chat_id=chat_id, message_id=user_captcha[0][13])
                        await bot.delete_message(chat_id=chat_id, message_id=message.message_id)

            all_users = database.check_all_users_captcha()
            for user in all_users:
                time_now = datetime.datetime.now()
                dt1 = datetime.datetime(time_now.year, time_now.month, time_now.day, time_now.hour, time_now.minute,
                                        time_now.second)
                dt2 = datetime.datetime(user[6], user[5], user[4], user[10], user[11], user[12])
                dt3 = int((dt2 - dt1).days)
                if dt3 < 0:
                    await bot.kick_chat_member(chat_id=user[2], user_id=user[1])
                    await bot.delete_message(chat_id=user[2], message_id=user[-1])
                    await bot.delete_message(chat_id=user[2], message_id=message.message_id)
                    database.delete_captcha_user(id_user=user[1], id_chat=user[2])

                else:
                    pass

        limition_chat = database.get_limition_chat(chat_id=message.chat.id)
        if limition_chat[0][2] == True:
            dt_string = datetime.datetime.now().strftime("%H:%M:%S")
            if (dt_string == "18:00:00"):  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–≤–Ω–∞ —Å—Ç—Ä–æ–∫–µ —Å –Ω—É–∂–Ω–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                await message.answer('Dear users, for your safety, do not give out your personal data')

        if limition_chat[0][1] == True: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ silence - –º—É—Ç –≤—Å–µ—Ö –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin == 'member':
                await message.delete()

        if limition_chat[0][0] == True: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            user_admin = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
            user_id_is_admin = user_admin['status']
            if user_id_is_admin == 'member':
                if 'http' in message.text or 't.me' in message.text or '.com' in message.text or '.ru' in message.text or '.net' in message.text:
                    await message.delete()



@dp.message_handler()
async def warning_text():
    get_all_users_who_on_warning = database.get_all_warning()
    if get_all_users_who_on_warning == []:
        pass
    else:
        for chat in get_all_users_who_on_warning:
            try:
                language_captcha = database.get_language_captcha(id_chat=chat[0])
                if language_captcha == []:

                    await bot.send_message(chat_id=chat[0], text="""Dear users, your safety is important to us, so we recommend you not to post your personal information, as well as any other personal information. Do not click on third-party links not sent by the chat administrator.
            """)
                    await bot.send_message(chat_id=chat[0], text='Thank you for your attention and have a great day!')

                elif language_captcha[0][0] == 'ru':

                    await bot.send_message(chat_id=chat[0], text="""–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–ª—è –Ω–∞—Å –≤–∞–∂–Ω–∞ –≤–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –Ω–µ —Ä–∞–∑–º–µ—â–∞—Ç—å —Å–≤–æ—é –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º —Å—Å—ã–ª–∫–∞–º, –Ω–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞.
                                """)
                    await bot.send_message(chat_id=chat[0], text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!')
                elif language_captcha[0][0] == 'gb':

                    await bot.send_message(chat_id=chat[0], text="""Dear users, your safety is important to us, so we recommend you not to post your personal information, as well as any other personal information. Do not click on third-party links not sent by the chat administrator.
                                """)
                    await bot.send_message(chat_id=chat[0], text='Thank you for your attention and have a great day!')
            except Exception as ex:
                continue

    await asyncio.sleep(120)

@dp.message_handler()
async def check_time_captcha():
    all_users = database.check_all_users_captcha() # –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–ª—É—á–∏–≤—à–∏–µ –∫–∞–ø—Ç—á—É (–Ω–∞—Å—Ç. –≤—Ä–µ–º—è)
    for user in all_users:
        time_now = datetime.datetime.now()
        datetime_now = datetime.datetime(time_now.year, time_now.month, time_now.day, time_now.hour, time_now.minute, time_now.second)
        datetime_end = datetime.datetime(user[6], user[5], user[4], user[10], user[11], user[12]) # –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—Ç—á—É
        datetime_captcha = int((datetime_end - datetime_now).days) # –∞–ª–≥–æ—Ä–∏—Ç–º, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–æ—Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –∫–∞–ø—Ç—á–∏, –µ—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω—É–ª—è - –∫–∞–ø—Ç—á–∞ –∏—Å—Ç–µ–∫–ª–∞ => –±–∞–Ω
        if datetime_captcha < 0:
            try:
            # –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.delete_message(chat_id=user[2], message_id=user[-1])
                await bot.kick_chat_member(chat_id=user[2], user_id=user[1])
                database.delete_captcha_user(id_user=user[1], id_chat=user[2])
            except Exception as ex:
                continue
        else:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass

async def scheduler():
    # –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–º–∞–Ω–¥—ã warning
    aioschedule.every().day.at("00:00").do(warning_text)
    aioschedule.every().day.at("06:00").do(warning_text)
    aioschedule.every().day.at("12:00").do(warning_text)
    aioschedule.every().day.at("18:00").do(warning_text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–ø—Ç—á–∏ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
    aioschedule.every().day.at("21:46").do(check_time_captcha)

    aioschedule.every().day.at("00:30").do(check_time_captcha)
    aioschedule.every().day.at("01:00").do(check_time_captcha)
    aioschedule.every().day.at("00:30").do(check_time_captcha)
    aioschedule.every().day.at("02:00").do(check_time_captcha)
    aioschedule.every().day.at("02:30").do(check_time_captcha)
    aioschedule.every().day.at("03:00").do(check_time_captcha)
    aioschedule.every().day.at("03:30").do(check_time_captcha)
    aioschedule.every().day.at("04:00").do(check_time_captcha)
    aioschedule.every().day.at("04:30").do(check_time_captcha)
    aioschedule.every().day.at("05:00").do(check_time_captcha)
    aioschedule.every().day.at("05:30").do(check_time_captcha)
    aioschedule.every().day.at("06:00").do(check_time_captcha)
    aioschedule.every().day.at("00:00").do(check_time_captcha)
    aioschedule.every().day.at("06:00").do(check_time_captcha)
    aioschedule.every().day.at("06:30").do(check_time_captcha)
    aioschedule.every().day.at("07:00").do(check_time_captcha)
    aioschedule.every().day.at("07:30").do(check_time_captcha)
    aioschedule.every().day.at("08:00").do(check_time_captcha)
    aioschedule.every().day.at("08:30").do(check_time_captcha)
    aioschedule.every().day.at("09:00").do(check_time_captcha)
    aioschedule.every().day.at("09:30").do(check_time_captcha)
    aioschedule.every().day.at("10:00").do(check_time_captcha)
    aioschedule.every().day.at("10:30").do(check_time_captcha)
    aioschedule.every().day.at("11:00").do(check_time_captcha)
    aioschedule.every().day.at("11:30").do(check_time_captcha)
    aioschedule.every().day.at("12:00").do(check_time_captcha)
    aioschedule.every().day.at("12:30").do(check_time_captcha)
    aioschedule.every().day.at("13:00").do(check_time_captcha)
    aioschedule.every().day.at("13:30").do(check_time_captcha)
    aioschedule.every().day.at("14:00").do(check_time_captcha)
    aioschedule.every().day.at("14:30").do(check_time_captcha)
    aioschedule.every().day.at("15:00").do(check_time_captcha)
    aioschedule.every().day.at("15:30").do(check_time_captcha)
    aioschedule.every().day.at("16:00").do(check_time_captcha)
    aioschedule.every().day.at("16:30").do(check_time_captcha)
    aioschedule.every().day.at("17:00").do(check_time_captcha)
    aioschedule.every().day.at("17:30").do(check_time_captcha)
    aioschedule.every().day.at("18:00").do(check_time_captcha)
    aioschedule.every().day.at("18:30").do(check_time_captcha)
    aioschedule.every().day.at("19:00").do(check_time_captcha)
    aioschedule.every().day.at("19:30").do(check_time_captcha)
    aioschedule.every().day.at("20:00").do(check_time_captcha)
    aioschedule.every().day.at("20:30").do(check_time_captcha)
    aioschedule.every().day.at("21:00").do(check_time_captcha)
    aioschedule.every().day.at("21:30").do(check_time_captcha)
    aioschedule.every().day.at("22:00").do(check_time_captcha)
    aioschedule.every().day.at("22:30").do(check_time_captcha)
    aioschedule.every().day.at("23:00").do(check_time_captcha)
    aioschedule.every().day.at("23:30").do(check_time_captcha)
    aioschedule.every().day.at("00:01").do(check_time_captcha)

    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(dp):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(dispatcher=dp, skip_updates=True, on_startup=on_startup)